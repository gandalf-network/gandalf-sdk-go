// Code generated by github.com/gandalf-network/gandalf-sdk-go/eyeofsauron, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"crypto/ecdsa"
	"crypto/rand"
	"crypto/sha256"
	"encoding/base64"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/btcsuite/btcd/btcec/v2"
	"github.com/gandalf-network/gandalf-sdk-go/eyeofsauron/graphqlTypes"
	graphql2 "github.com/machinebox/graphql"
)

type EyeOfSauron struct {
	client     *graphql2.Client
	privateKey *ecdsa.PrivateKey
}

func NewEyeOfSauron(privateKey string) (*EyeOfSauron, error) {
	client := graphql2.NewClient("http://localhost:1000/public/gql")
	privKey, err := HexToECDSAPrivateKey(privateKey)
	if err != nil {
		return nil, fmt.Errorf("failed to parse private key: %v", err)
	}
	return &EyeOfSauron{
		privateKey: privKey,
		client:     client,
	}, nil
}

// HexToECDSAPrivateKey converts a hexadecimal string representing a private key
// into an *ecdsa.PrivateKey for the secp256k1 curve.
func HexToECDSAPrivateKey(hexKey string) (*ecdsa.PrivateKey, error) {
	trimmedHexKey := strings.TrimPrefix(hexKey, "0x")

	privKeyBytes, err := hex.DecodeString(trimmedHexKey)
	if err != nil {
		return nil, fmt.Errorf("failed to decode hex string: %v", err)
	}

	privKey, _ := btcec.PrivKeyFromBytes(privKeyBytes)

	return privKey.ToECDSA(), nil
}

// SignMessage signs a message using the given ECDSA private key.
func SignMessageAsBase64(privKey *ecdsa.PrivateKey, message []byte) (string, error) {
	hash := sha256.Sum256(message)

	signature, err := ecdsa.SignASN1(rand.Reader, privKey, hash[:])
	if err != nil {
		return "", fmt.Errorf("failed to sign message: %v", err)
	}

	signatureB64 := base64.StdEncoding.EncodeToString(signature)

	return signatureB64, nil
}

// AmazonActivityMetadataFragment includes the GraphQL fields of AmazonActivityMetadata requested by the fragment AmazonActivityMetadataFragment.
type AmazonActivityMetadataFragment struct {
	ProductName       string                                            `json:"productName"`
	Subject           []AmazonActivityMetadataFragmentSubjectIdentifier `json:"subject"`
	Date              graphqlTypes.Date                                 `json:"date"`
	QuantityPurchased int                                               `json:"quantityPurchased"`
	TotalCost         string                                            `json:"totalCost"`
}

// GetProductName returns AmazonActivityMetadataFragment.ProductName, and is useful for accessing the field via an interface.
func (v *AmazonActivityMetadataFragment) GetProductName() string { return v.ProductName }

// GetSubject returns AmazonActivityMetadataFragment.Subject, and is useful for accessing the field via an interface.
func (v *AmazonActivityMetadataFragment) GetSubject() []AmazonActivityMetadataFragmentSubjectIdentifier {
	return v.Subject
}

// GetDate returns AmazonActivityMetadataFragment.Date, and is useful for accessing the field via an interface.
func (v *AmazonActivityMetadataFragment) GetDate() graphqlTypes.Date { return v.Date }

// GetQuantityPurchased returns AmazonActivityMetadataFragment.QuantityPurchased, and is useful for accessing the field via an interface.
func (v *AmazonActivityMetadataFragment) GetQuantityPurchased() int { return v.QuantityPurchased }

// GetTotalCost returns AmazonActivityMetadataFragment.TotalCost, and is useful for accessing the field via an interface.
func (v *AmazonActivityMetadataFragment) GetTotalCost() string { return v.TotalCost }

// AmazonActivityMetadataFragmentSubjectIdentifier includes the requested fields of the GraphQL type Identifier.
type AmazonActivityMetadataFragmentSubjectIdentifier struct {
	Value          string         `json:"value"`
	IdentifierType IdentifierType `json:"identifierType"`
}

// GetValue returns AmazonActivityMetadataFragmentSubjectIdentifier.Value, and is useful for accessing the field via an interface.
func (v *AmazonActivityMetadataFragmentSubjectIdentifier) GetValue() string { return v.Value }

// GetIdentifierType returns AmazonActivityMetadataFragmentSubjectIdentifier.IdentifierType, and is useful for accessing the field via an interface.
func (v *AmazonActivityMetadataFragmentSubjectIdentifier) GetIdentifierType() IdentifierType {
	return v.IdentifierType
}

type ContentType string

const (
	ContentTypeVideo  ContentType = "VIDEO"
	ContentTypeShorts ContentType = "SHORTS"
	ContentTypeMusic  ContentType = "MUSIC"
)

type IdentifierType string

const (
	IdentifierTypeImdb        IdentifierType = "IMDB"
	IdentifierTypeMoby        IdentifierType = "MOBY"
	IdentifierTypeRawg        IdentifierType = "RAWG"
	IdentifierTypeIgdb        IdentifierType = "IGDB"
	IdentifierTypeAsin        IdentifierType = "ASIN"
	IdentifierTypePlaystation IdentifierType = "PLAYSTATION"
	IdentifierTypeYoutube     IdentifierType = "YOUTUBE"
	IdentifierTypeTvdb        IdentifierType = "TVDB"
	IdentifierTypeTvmaze      IdentifierType = "TVMAZE"
	IdentifierTypeUber        IdentifierType = "UBER"
	IdentifierTypeInstacart   IdentifierType = "INSTACART"
)

// InstacartActivityMetadataFragment includes the GraphQL fields of InstacartActivityMetadata requested by the fragment InstacartActivityMetadataFragment.
type InstacartActivityMetadataFragment struct {
	Subject               []InstacartActivityMetadataFragmentSubjectIdentifier       `json:"subject"`
	Retailer              string                                                     `json:"retailer"`
	TotalOrderAmountSpent string                                                     `json:"totalOrderAmountSpent"`
	DateOrdered           graphqlTypes.Date                                          `json:"dateOrdered"`
	DateDelivered         graphqlTypes.Date                                          `json:"dateDelivered"`
	StatusString          string                                                     `json:"statusString"`
	Items                 []InstacartActivityMetadataFragmentItemsInstacartOrderItem `json:"items"`
}

// GetSubject returns InstacartActivityMetadataFragment.Subject, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataFragment) GetSubject() []InstacartActivityMetadataFragmentSubjectIdentifier {
	return v.Subject
}

// GetRetailer returns InstacartActivityMetadataFragment.Retailer, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataFragment) GetRetailer() string { return v.Retailer }

// GetTotalOrderAmountSpent returns InstacartActivityMetadataFragment.TotalOrderAmountSpent, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataFragment) GetTotalOrderAmountSpent() string {
	return v.TotalOrderAmountSpent
}

// GetDateOrdered returns InstacartActivityMetadataFragment.DateOrdered, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataFragment) GetDateOrdered() graphqlTypes.Date { return v.DateOrdered }

// GetDateDelivered returns InstacartActivityMetadataFragment.DateDelivered, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataFragment) GetDateDelivered() graphqlTypes.Date {
	return v.DateDelivered
}

// GetStatusString returns InstacartActivityMetadataFragment.StatusString, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataFragment) GetStatusString() string { return v.StatusString }

// GetItems returns InstacartActivityMetadataFragment.Items, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataFragment) GetItems() []InstacartActivityMetadataFragmentItemsInstacartOrderItem {
	return v.Items
}

// InstacartActivityMetadataFragmentItemsInstacartOrderItem includes the requested fields of the GraphQL type InstacartOrderItem.
type InstacartActivityMetadataFragmentItemsInstacartOrderItem struct {
	ItemID            string              `json:"itemID"`
	ProductName       string              `json:"productName"`
	UnitPrice         string              `json:"unitPrice"`
	Status            InstacartItemStatus `json:"status"`
	QuantityPurchased graphqlTypes.Int64  `json:"quantityPurchased"`
}

// GetItemID returns InstacartActivityMetadataFragmentItemsInstacartOrderItem.ItemID, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataFragmentItemsInstacartOrderItem) GetItemID() string {
	return v.ItemID
}

// GetProductName returns InstacartActivityMetadataFragmentItemsInstacartOrderItem.ProductName, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataFragmentItemsInstacartOrderItem) GetProductName() string {
	return v.ProductName
}

// GetUnitPrice returns InstacartActivityMetadataFragmentItemsInstacartOrderItem.UnitPrice, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataFragmentItemsInstacartOrderItem) GetUnitPrice() string {
	return v.UnitPrice
}

// GetStatus returns InstacartActivityMetadataFragmentItemsInstacartOrderItem.Status, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataFragmentItemsInstacartOrderItem) GetStatus() InstacartItemStatus {
	return v.Status
}

// GetQuantityPurchased returns InstacartActivityMetadataFragmentItemsInstacartOrderItem.QuantityPurchased, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataFragmentItemsInstacartOrderItem) GetQuantityPurchased() graphqlTypes.Int64 {
	return v.QuantityPurchased
}

// InstacartActivityMetadataFragmentSubjectIdentifier includes the requested fields of the GraphQL type Identifier.
type InstacartActivityMetadataFragmentSubjectIdentifier struct {
	Value          string         `json:"value"`
	IdentifierType IdentifierType `json:"identifierType"`
}

// GetValue returns InstacartActivityMetadataFragmentSubjectIdentifier.Value, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataFragmentSubjectIdentifier) GetValue() string { return v.Value }

// GetIdentifierType returns InstacartActivityMetadataFragmentSubjectIdentifier.IdentifierType, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataFragmentSubjectIdentifier) GetIdentifierType() IdentifierType {
	return v.IdentifierType
}

type InstacartItemStatus string

const (
	InstacartItemStatusFound    InstacartItemStatus = "FOUND"
	InstacartItemStatusReplaced InstacartItemStatus = "REPLACED"
	InstacartItemStatusTorefund InstacartItemStatus = "TOREFUND"
)

// NetflixActivityMetadataFragment includes the GraphQL fields of NetflixActivityMetadata requested by the fragment NetflixActivityMetadataFragment.
type NetflixActivityMetadataFragment struct {
	Title        string                                             `json:"title"`
	Subject      []NetflixActivityMetadataFragmentSubjectIdentifier `json:"subject"`
	Date         graphqlTypes.Date                                  `json:"date"`
	LastPlayedAt graphqlTypes.Date                                  `json:"lastPlayedAt"`
}

// GetTitle returns NetflixActivityMetadataFragment.Title, and is useful for accessing the field via an interface.
func (v *NetflixActivityMetadataFragment) GetTitle() string { return v.Title }

// GetSubject returns NetflixActivityMetadataFragment.Subject, and is useful for accessing the field via an interface.
func (v *NetflixActivityMetadataFragment) GetSubject() []NetflixActivityMetadataFragmentSubjectIdentifier {
	return v.Subject
}

// GetDate returns NetflixActivityMetadataFragment.Date, and is useful for accessing the field via an interface.
func (v *NetflixActivityMetadataFragment) GetDate() graphqlTypes.Date { return v.Date }

// GetLastPlayedAt returns NetflixActivityMetadataFragment.LastPlayedAt, and is useful for accessing the field via an interface.
func (v *NetflixActivityMetadataFragment) GetLastPlayedAt() graphqlTypes.Date { return v.LastPlayedAt }

// NetflixActivityMetadataFragmentSubjectIdentifier includes the requested fields of the GraphQL type Identifier.
type NetflixActivityMetadataFragmentSubjectIdentifier struct {
	Value          string         `json:"value"`
	IdentifierType IdentifierType `json:"identifierType"`
}

// GetValue returns NetflixActivityMetadataFragmentSubjectIdentifier.Value, and is useful for accessing the field via an interface.
func (v *NetflixActivityMetadataFragmentSubjectIdentifier) GetValue() string { return v.Value }

// GetIdentifierType returns NetflixActivityMetadataFragmentSubjectIdentifier.IdentifierType, and is useful for accessing the field via an interface.
func (v *NetflixActivityMetadataFragmentSubjectIdentifier) GetIdentifierType() IdentifierType {
	return v.IdentifierType
}

// PlaystationActivityMetadataFragment includes the GraphQL fields of PlaystationActivityMetadata requested by the fragment PlaystationActivityMetadataFragment.
type PlaystationActivityMetadataFragment struct {
	Title        string                                                 `json:"title"`
	Subject      []PlaystationActivityMetadataFragmentSubjectIdentifier `json:"subject"`
	LastPlayedAt graphqlTypes.Date                                      `json:"lastPlayedAt"`
}

// GetTitle returns PlaystationActivityMetadataFragment.Title, and is useful for accessing the field via an interface.
func (v *PlaystationActivityMetadataFragment) GetTitle() string { return v.Title }

// GetSubject returns PlaystationActivityMetadataFragment.Subject, and is useful for accessing the field via an interface.
func (v *PlaystationActivityMetadataFragment) GetSubject() []PlaystationActivityMetadataFragmentSubjectIdentifier {
	return v.Subject
}

// GetLastPlayedAt returns PlaystationActivityMetadataFragment.LastPlayedAt, and is useful for accessing the field via an interface.
func (v *PlaystationActivityMetadataFragment) GetLastPlayedAt() graphqlTypes.Date {
	return v.LastPlayedAt
}

// PlaystationActivityMetadataFragmentSubjectIdentifier includes the requested fields of the GraphQL type Identifier.
type PlaystationActivityMetadataFragmentSubjectIdentifier struct {
	Value          string         `json:"value"`
	IdentifierType IdentifierType `json:"identifierType"`
}

// GetValue returns PlaystationActivityMetadataFragmentSubjectIdentifier.Value, and is useful for accessing the field via an interface.
func (v *PlaystationActivityMetadataFragmentSubjectIdentifier) GetValue() string { return v.Value }

// GetIdentifierType returns PlaystationActivityMetadataFragmentSubjectIdentifier.IdentifierType, and is useful for accessing the field via an interface.
func (v *PlaystationActivityMetadataFragmentSubjectIdentifier) GetIdentifierType() IdentifierType {
	return v.IdentifierType
}

type Source string

const (
	SourceNetflix     Source = "NETFLIX"
	SourcePlaystation Source = "PLAYSTATION"
	SourceYoutube     Source = "YOUTUBE"
	SourceAmazon      Source = "AMAZON"
	SourceUber        Source = "UBER"
	SourceInstacart   Source = "INSTACART"
	SourceInstagram   Source = "INSTAGRAM"
	SourceX           Source = "X"
)

type TraitLabel string

const (
	TraitLabelPrimeSubscriber  TraitLabel = "PRIME_SUBSCRIBER"
	TraitLabelRating           TraitLabel = "RATING"
	TraitLabelTripCount        TraitLabel = "TRIP_COUNT"
	TraitLabelAccountCreatedOn TraitLabel = "ACCOUNT_CREATED_ON"
	TraitLabelPlan             TraitLabel = "PLAN"
	TraitLabelGeniusLevel      TraitLabel = "GENIUS_LEVEL"
	TraitLabelFollowerCount    TraitLabel = "FOLLOWER_COUNT"
	TraitLabelFollowingCount   TraitLabel = "FOLLOWING_COUNT"
	TraitLabelUsername         TraitLabel = "USERNAME"
	TraitLabelPostCount        TraitLabel = "POST_COUNT"
)

type TripStatus string

const (
	TripStatusCanceled    TripStatus = "CANCELED"
	TripStatusCompleted   TripStatus = "COMPLETED"
	TripStatusUnfulfilled TripStatus = "UNFULFILLED"
)

// UberActivityMetadataFragment includes the GraphQL fields of UberActivityMetadata requested by the fragment UberActivityMetadataFragment.
type UberActivityMetadataFragment struct {
	Subject       []UberActivityMetadataFragmentSubjectIdentifier `json:"subject"`
	BeginTripTime time.Time                                       `json:"beginTripTime"`
	DropoffTime   time.Time                                       `json:"dropoffTime"`
	Cost          string                                          `json:"cost"`
	City          string                                          `json:"city"`
	Distance      string                                          `json:"distance"`
	Status        TripStatus                                      `json:"status"`
}

// GetSubject returns UberActivityMetadataFragment.Subject, and is useful for accessing the field via an interface.
func (v *UberActivityMetadataFragment) GetSubject() []UberActivityMetadataFragmentSubjectIdentifier {
	return v.Subject
}

// GetBeginTripTime returns UberActivityMetadataFragment.BeginTripTime, and is useful for accessing the field via an interface.
func (v *UberActivityMetadataFragment) GetBeginTripTime() time.Time { return v.BeginTripTime }

// GetDropoffTime returns UberActivityMetadataFragment.DropoffTime, and is useful for accessing the field via an interface.
func (v *UberActivityMetadataFragment) GetDropoffTime() time.Time { return v.DropoffTime }

// GetCost returns UberActivityMetadataFragment.Cost, and is useful for accessing the field via an interface.
func (v *UberActivityMetadataFragment) GetCost() string { return v.Cost }

// GetCity returns UberActivityMetadataFragment.City, and is useful for accessing the field via an interface.
func (v *UberActivityMetadataFragment) GetCity() string { return v.City }

// GetDistance returns UberActivityMetadataFragment.Distance, and is useful for accessing the field via an interface.
func (v *UberActivityMetadataFragment) GetDistance() string { return v.Distance }

// GetStatus returns UberActivityMetadataFragment.Status, and is useful for accessing the field via an interface.
func (v *UberActivityMetadataFragment) GetStatus() TripStatus { return v.Status }

// UberActivityMetadataFragmentSubjectIdentifier includes the requested fields of the GraphQL type Identifier.
type UberActivityMetadataFragmentSubjectIdentifier struct {
	Value          string         `json:"value"`
	IdentifierType IdentifierType `json:"identifierType"`
}

// GetValue returns UberActivityMetadataFragmentSubjectIdentifier.Value, and is useful for accessing the field via an interface.
func (v *UberActivityMetadataFragmentSubjectIdentifier) GetValue() string { return v.Value }

// GetIdentifierType returns UberActivityMetadataFragmentSubjectIdentifier.IdentifierType, and is useful for accessing the field via an interface.
func (v *UberActivityMetadataFragmentSubjectIdentifier) GetIdentifierType() IdentifierType {
	return v.IdentifierType
}

// YoutubeActivityMetadataFragment includes the GraphQL fields of YoutubeActivityMetadata requested by the fragment YoutubeActivityMetadataFragment.
type YoutubeActivityMetadataFragment struct {
	Title             string                                             `json:"title"`
	Subject           []YoutubeActivityMetadataFragmentSubjectIdentifier `json:"subject"`
	Date              graphqlTypes.Date                                  `json:"date"`
	PercentageWatched int                                                `json:"percentageWatched"`
	ContentType       ContentType                                        `json:"contentType"`
}

// GetTitle returns YoutubeActivityMetadataFragment.Title, and is useful for accessing the field via an interface.
func (v *YoutubeActivityMetadataFragment) GetTitle() string { return v.Title }

// GetSubject returns YoutubeActivityMetadataFragment.Subject, and is useful for accessing the field via an interface.
func (v *YoutubeActivityMetadataFragment) GetSubject() []YoutubeActivityMetadataFragmentSubjectIdentifier {
	return v.Subject
}

// GetDate returns YoutubeActivityMetadataFragment.Date, and is useful for accessing the field via an interface.
func (v *YoutubeActivityMetadataFragment) GetDate() graphqlTypes.Date { return v.Date }

// GetPercentageWatched returns YoutubeActivityMetadataFragment.PercentageWatched, and is useful for accessing the field via an interface.
func (v *YoutubeActivityMetadataFragment) GetPercentageWatched() int { return v.PercentageWatched }

// GetContentType returns YoutubeActivityMetadataFragment.ContentType, and is useful for accessing the field via an interface.
func (v *YoutubeActivityMetadataFragment) GetContentType() ContentType { return v.ContentType }

// YoutubeActivityMetadataFragmentSubjectIdentifier includes the requested fields of the GraphQL type Identifier.
type YoutubeActivityMetadataFragmentSubjectIdentifier struct {
	Value          string         `json:"value"`
	IdentifierType IdentifierType `json:"identifierType"`
}

// GetValue returns YoutubeActivityMetadataFragmentSubjectIdentifier.Value, and is useful for accessing the field via an interface.
func (v *YoutubeActivityMetadataFragmentSubjectIdentifier) GetValue() string { return v.Value }

// GetIdentifierType returns YoutubeActivityMetadataFragmentSubjectIdentifier.IdentifierType, and is useful for accessing the field via an interface.
func (v *YoutubeActivityMetadataFragmentSubjectIdentifier) GetIdentifierType() IdentifierType {
	return v.IdentifierType
}

// __getActivityInput is used internally by genqlient
type __getActivityInput struct {
	DataKey string             `json:"dataKey"`
	Source  Source             `json:"source"`
	Limit   graphqlTypes.Int64 `json:"limit"`
	Page    graphqlTypes.Int64 `json:"page"`
}

// GetDataKey returns __getActivityInput.DataKey, and is useful for accessing the field via an interface.
func (v *__getActivityInput) GetDataKey() string { return v.DataKey }

// GetSource returns __getActivityInput.Source, and is useful for accessing the field via an interface.
func (v *__getActivityInput) GetSource() Source { return v.Source }

// GetLimit returns __getActivityInput.Limit, and is useful for accessing the field via an interface.
func (v *__getActivityInput) GetLimit() graphqlTypes.Int64 { return v.Limit }

// GetPage returns __getActivityInput.Page, and is useful for accessing the field via an interface.
func (v *__getActivityInput) GetPage() graphqlTypes.Int64 { return v.Page }

// __getAppByPublicKeyInput is used internally by genqlient
type __getAppByPublicKeyInput struct {
	PublicKey string `json:"publicKey"`
}

// GetPublicKey returns __getAppByPublicKeyInput.PublicKey, and is useful for accessing the field via an interface.
func (v *__getAppByPublicKeyInput) GetPublicKey() string { return v.PublicKey }

// __getTraitsInput is used internally by genqlient
type __getTraitsInput struct {
	DataKey string       `json:"dataKey"`
	Source  Source       `json:"source"`
	Labels  []TraitLabel `json:"labels"`
}

// GetDataKey returns __getTraitsInput.DataKey, and is useful for accessing the field via an interface.
func (v *__getTraitsInput) GetDataKey() string { return v.DataKey }

// GetSource returns __getTraitsInput.Source, and is useful for accessing the field via an interface.
func (v *__getTraitsInput) GetSource() Source { return v.Source }

// GetLabels returns __getTraitsInput.Labels, and is useful for accessing the field via an interface.
func (v *__getTraitsInput) GetLabels() []TraitLabel { return v.Labels }

// __lookupActivityInput is used internally by genqlient
type __lookupActivityInput struct {
	DataKey    string            `json:"dataKey"`
	ActivityId graphqlTypes.UUID `json:"activityId"`
}

// GetDataKey returns __lookupActivityInput.DataKey, and is useful for accessing the field via an interface.
func (v *__lookupActivityInput) GetDataKey() string { return v.DataKey }

// GetActivityId returns __lookupActivityInput.ActivityId, and is useful for accessing the field via an interface.
func (v *__lookupActivityInput) GetActivityId() graphqlTypes.UUID { return v.ActivityId }

// __lookupTraitInput is used internally by genqlient
type __lookupTraitInput struct {
	DataKey string            `json:"dataKey"`
	TraitId graphqlTypes.UUID `json:"traitId"`
}

// GetDataKey returns __lookupTraitInput.DataKey, and is useful for accessing the field via an interface.
func (v *__lookupTraitInput) GetDataKey() string { return v.DataKey }

// GetTraitId returns __lookupTraitInput.TraitId, and is useful for accessing the field via an interface.
func (v *__lookupTraitInput) GetTraitId() graphqlTypes.UUID { return v.TraitId }

// getActivityGetActivityActivityResponse includes the requested fields of the GraphQL type ActivityResponse.
type getActivityGetActivityActivityResponse struct {
	Data  []getActivityGetActivityActivityResponseDataActivity `json:"data"`
	Limit graphqlTypes.Int64                                   `json:"limit"`
	Total graphqlTypes.Int64                                   `json:"total"`
	Page  graphqlTypes.Int64                                   `json:"page"`
}

// GetData returns getActivityGetActivityActivityResponse.Data, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponse) GetData() []getActivityGetActivityActivityResponseDataActivity {
	return v.Data
}

// GetLimit returns getActivityGetActivityActivityResponse.Limit, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponse) GetLimit() graphqlTypes.Int64 { return v.Limit }

// GetTotal returns getActivityGetActivityActivityResponse.Total, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponse) GetTotal() graphqlTypes.Int64 { return v.Total }

// GetPage returns getActivityGetActivityActivityResponse.Page, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponse) GetPage() graphqlTypes.Int64 { return v.Page }

// getActivityGetActivityActivityResponseDataActivity includes the requested fields of the GraphQL type Activity.
type getActivityGetActivityActivityResponseDataActivity struct {
	Id       string                                                     `json:"id"`
	Metadata getActivityGetActivityActivityResponseDataActivityMetadata `json:"-"`
}

// GetId returns getActivityGetActivityActivityResponseDataActivity.Id, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivity) GetId() string { return v.Id }

// GetMetadata returns getActivityGetActivityActivityResponseDataActivity.Metadata, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivity) GetMetadata() getActivityGetActivityActivityResponseDataActivityMetadata {
	return v.Metadata
}

func (v *getActivityGetActivityActivityResponseDataActivity) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getActivityGetActivityActivityResponseDataActivity
		Metadata json.RawMessage `json:"metadata"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getActivityGetActivityActivityResponseDataActivity = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Metadata
		src := firstPass.Metadata
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalgetActivityGetActivityActivityResponseDataActivityMetadata(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getActivityGetActivityActivityResponseDataActivity.Metadata: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetActivityGetActivityActivityResponseDataActivity struct {
	Id string `json:"id"`

	Metadata json.RawMessage `json:"metadata"`
}

func (v *getActivityGetActivityActivityResponseDataActivity) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getActivityGetActivityActivityResponseDataActivity) __premarshalJSON() (*__premarshalgetActivityGetActivityActivityResponseDataActivity, error) {
	var retval __premarshalgetActivityGetActivityActivityResponseDataActivity

	retval.Id = v.Id
	{

		dst := &retval.Metadata
		src := v.Metadata
		var err error
		*dst, err = __marshalgetActivityGetActivityActivityResponseDataActivityMetadata(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getActivityGetActivityActivityResponseDataActivity.Metadata: %w", err)
		}
	}
	return &retval, nil
}

// getActivityGetActivityActivityResponseDataActivityMetadata includes the requested fields of the GraphQL interface ActivityMetadata.
//
// getActivityGetActivityActivityResponseDataActivityMetadata is implemented by the following types:
// getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata
// getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata
// getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata
// getActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata
// getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata
// getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata
type getActivityGetActivityActivityResponseDataActivityMetadata interface {
	implementsGraphQLInterfacegetActivityGetActivityActivityResponseDataActivityMetadata()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata) implementsGraphQLInterfacegetActivityGetActivityActivityResponseDataActivityMetadata() {
}
func (v *getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) implementsGraphQLInterfacegetActivityGetActivityActivityResponseDataActivityMetadata() {
}
func (v *getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata) implementsGraphQLInterfacegetActivityGetActivityActivityResponseDataActivityMetadata() {
}
func (v *getActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata) implementsGraphQLInterfacegetActivityGetActivityActivityResponseDataActivityMetadata() {
}
func (v *getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata) implementsGraphQLInterfacegetActivityGetActivityActivityResponseDataActivityMetadata() {
}
func (v *getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata) implementsGraphQLInterfacegetActivityGetActivityActivityResponseDataActivityMetadata() {
}

func __unmarshalgetActivityGetActivityActivityResponseDataActivityMetadata(b []byte, v *getActivityGetActivityActivityResponseDataActivityMetadata) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AmazonActivityMetadata":
		*v = new(getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata)
		return json.Unmarshal(b, *v)
	case "InstacartActivityMetadata":
		*v = new(getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata)
		return json.Unmarshal(b, *v)
	case "NetflixActivityMetadata":
		*v = new(getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata)
		return json.Unmarshal(b, *v)
	case "PlaystationActivityMetadata":
		*v = new(getActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata)
		return json.Unmarshal(b, *v)
	case "UberActivityMetadata":
		*v = new(getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata)
		return json.Unmarshal(b, *v)
	case "YoutubeActivityMetadata":
		*v = new(getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ActivityMetadata.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for getActivityGetActivityActivityResponseDataActivityMetadata: "%v"`, tn.TypeName)
	}
}

func __marshalgetActivityGetActivityActivityResponseDataActivityMetadata(v *getActivityGetActivityActivityResponseDataActivityMetadata) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata:
		typename = "AmazonActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalgetActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata:
		typename = "InstacartActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalgetActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata:
		typename = "NetflixActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalgetActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *getActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata:
		typename = "PlaystationActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalgetActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata:
		typename = "UberActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalgetActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata:
		typename = "YoutubeActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalgetActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for getActivityGetActivityActivityResponseDataActivityMetadata: "%T"`, v)
	}
}

// getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata includes the requested fields of the GraphQL type AmazonActivityMetadata.
type getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata struct {
	Typename                       string `json:"__typename"`
	AmazonActivityMetadataFragment `json:"-"`
}

// GetTypename returns getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata) GetTypename() string {
	return v.Typename
}

// GetProductName returns getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata.ProductName, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata) GetProductName() string {
	return v.AmazonActivityMetadataFragment.ProductName
}

// GetSubject returns getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata) GetSubject() []AmazonActivityMetadataFragmentSubjectIdentifier {
	return v.AmazonActivityMetadataFragment.Subject
}

// GetDate returns getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata.Date, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata) GetDate() graphqlTypes.Date {
	return v.AmazonActivityMetadataFragment.Date
}

// GetQuantityPurchased returns getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata.QuantityPurchased, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata) GetQuantityPurchased() int {
	return v.AmazonActivityMetadataFragment.QuantityPurchased
}

// GetTotalCost returns getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata.TotalCost, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata) GetTotalCost() string {
	return v.AmazonActivityMetadataFragment.TotalCost
}

func (v *getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AmazonActivityMetadataFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata struct {
	Typename string `json:"__typename"`

	ProductName string `json:"productName"`

	Subject []AmazonActivityMetadataFragmentSubjectIdentifier `json:"subject"`

	Date graphqlTypes.Date `json:"date"`

	QuantityPurchased int `json:"quantityPurchased"`

	TotalCost string `json:"totalCost"`
}

func (v *getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata) __premarshalJSON() (*__premarshalgetActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata, error) {
	var retval __premarshalgetActivityGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata

	retval.Typename = v.Typename
	retval.ProductName = v.AmazonActivityMetadataFragment.ProductName
	retval.Subject = v.AmazonActivityMetadataFragment.Subject
	retval.Date = v.AmazonActivityMetadataFragment.Date
	retval.QuantityPurchased = v.AmazonActivityMetadataFragment.QuantityPurchased
	retval.TotalCost = v.AmazonActivityMetadataFragment.TotalCost
	return &retval, nil
}

// getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata includes the requested fields of the GraphQL type InstacartActivityMetadata.
type getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata struct {
	Typename                          string `json:"__typename"`
	InstacartActivityMetadataFragment `json:"-"`
}

// GetTypename returns getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) GetTypename() string {
	return v.Typename
}

// GetSubject returns getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) GetSubject() []InstacartActivityMetadataFragmentSubjectIdentifier {
	return v.InstacartActivityMetadataFragment.Subject
}

// GetRetailer returns getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata.Retailer, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) GetRetailer() string {
	return v.InstacartActivityMetadataFragment.Retailer
}

// GetTotalOrderAmountSpent returns getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata.TotalOrderAmountSpent, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) GetTotalOrderAmountSpent() string {
	return v.InstacartActivityMetadataFragment.TotalOrderAmountSpent
}

// GetDateOrdered returns getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata.DateOrdered, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) GetDateOrdered() graphqlTypes.Date {
	return v.InstacartActivityMetadataFragment.DateOrdered
}

// GetDateDelivered returns getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata.DateDelivered, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) GetDateDelivered() graphqlTypes.Date {
	return v.InstacartActivityMetadataFragment.DateDelivered
}

// GetStatusString returns getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata.StatusString, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) GetStatusString() string {
	return v.InstacartActivityMetadataFragment.StatusString
}

// GetItems returns getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata.Items, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) GetItems() []InstacartActivityMetadataFragmentItemsInstacartOrderItem {
	return v.InstacartActivityMetadataFragment.Items
}

func (v *getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InstacartActivityMetadataFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata struct {
	Typename string `json:"__typename"`

	Subject []InstacartActivityMetadataFragmentSubjectIdentifier `json:"subject"`

	Retailer string `json:"retailer"`

	TotalOrderAmountSpent string `json:"totalOrderAmountSpent"`

	DateOrdered graphqlTypes.Date `json:"dateOrdered"`

	DateDelivered graphqlTypes.Date `json:"dateDelivered"`

	StatusString string `json:"statusString"`

	Items []InstacartActivityMetadataFragmentItemsInstacartOrderItem `json:"items"`
}

func (v *getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) __premarshalJSON() (*__premarshalgetActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata, error) {
	var retval __premarshalgetActivityGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata

	retval.Typename = v.Typename
	retval.Subject = v.InstacartActivityMetadataFragment.Subject
	retval.Retailer = v.InstacartActivityMetadataFragment.Retailer
	retval.TotalOrderAmountSpent = v.InstacartActivityMetadataFragment.TotalOrderAmountSpent
	retval.DateOrdered = v.InstacartActivityMetadataFragment.DateOrdered
	retval.DateDelivered = v.InstacartActivityMetadataFragment.DateDelivered
	retval.StatusString = v.InstacartActivityMetadataFragment.StatusString
	retval.Items = v.InstacartActivityMetadataFragment.Items
	return &retval, nil
}

// getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata includes the requested fields of the GraphQL type NetflixActivityMetadata.
type getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata struct {
	Typename                        string `json:"__typename"`
	NetflixActivityMetadataFragment `json:"-"`
}

// GetTypename returns getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata) GetTypename() string {
	return v.Typename
}

// GetTitle returns getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata.Title, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata) GetTitle() string {
	return v.NetflixActivityMetadataFragment.Title
}

// GetSubject returns getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata) GetSubject() []NetflixActivityMetadataFragmentSubjectIdentifier {
	return v.NetflixActivityMetadataFragment.Subject
}

// GetDate returns getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata.Date, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata) GetDate() graphqlTypes.Date {
	return v.NetflixActivityMetadataFragment.Date
}

// GetLastPlayedAt returns getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata.LastPlayedAt, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata) GetLastPlayedAt() graphqlTypes.Date {
	return v.NetflixActivityMetadataFragment.LastPlayedAt
}

func (v *getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NetflixActivityMetadataFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata struct {
	Typename string `json:"__typename"`

	Title string `json:"title"`

	Subject []NetflixActivityMetadataFragmentSubjectIdentifier `json:"subject"`

	Date graphqlTypes.Date `json:"date"`

	LastPlayedAt graphqlTypes.Date `json:"lastPlayedAt"`
}

func (v *getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata) __premarshalJSON() (*__premarshalgetActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata, error) {
	var retval __premarshalgetActivityGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata

	retval.Typename = v.Typename
	retval.Title = v.NetflixActivityMetadataFragment.Title
	retval.Subject = v.NetflixActivityMetadataFragment.Subject
	retval.Date = v.NetflixActivityMetadataFragment.Date
	retval.LastPlayedAt = v.NetflixActivityMetadataFragment.LastPlayedAt
	return &retval, nil
}

// getActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata includes the requested fields of the GraphQL type PlaystationActivityMetadata.
type getActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata struct {
	Typename                            string `json:"__typename"`
	PlaystationActivityMetadataFragment `json:"-"`
}

// GetTypename returns getActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata) GetTypename() string {
	return v.Typename
}

// GetTitle returns getActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata.Title, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata) GetTitle() string {
	return v.PlaystationActivityMetadataFragment.Title
}

// GetSubject returns getActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata) GetSubject() []PlaystationActivityMetadataFragmentSubjectIdentifier {
	return v.PlaystationActivityMetadataFragment.Subject
}

// GetLastPlayedAt returns getActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata.LastPlayedAt, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata) GetLastPlayedAt() graphqlTypes.Date {
	return v.PlaystationActivityMetadataFragment.LastPlayedAt
}

func (v *getActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.getActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PlaystationActivityMetadataFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata struct {
	Typename string `json:"__typename"`

	Title string `json:"title"`

	Subject []PlaystationActivityMetadataFragmentSubjectIdentifier `json:"subject"`

	LastPlayedAt graphqlTypes.Date `json:"lastPlayedAt"`
}

func (v *getActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata) __premarshalJSON() (*__premarshalgetActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata, error) {
	var retval __premarshalgetActivityGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata

	retval.Typename = v.Typename
	retval.Title = v.PlaystationActivityMetadataFragment.Title
	retval.Subject = v.PlaystationActivityMetadataFragment.Subject
	retval.LastPlayedAt = v.PlaystationActivityMetadataFragment.LastPlayedAt
	return &retval, nil
}

// getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata includes the requested fields of the GraphQL type UberActivityMetadata.
type getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata struct {
	Typename                     string `json:"__typename"`
	UberActivityMetadataFragment `json:"-"`
}

// GetTypename returns getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata) GetTypename() string {
	return v.Typename
}

// GetSubject returns getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata) GetSubject() []UberActivityMetadataFragmentSubjectIdentifier {
	return v.UberActivityMetadataFragment.Subject
}

// GetBeginTripTime returns getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata.BeginTripTime, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata) GetBeginTripTime() time.Time {
	return v.UberActivityMetadataFragment.BeginTripTime
}

// GetDropoffTime returns getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata.DropoffTime, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata) GetDropoffTime() time.Time {
	return v.UberActivityMetadataFragment.DropoffTime
}

// GetCost returns getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata.Cost, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata) GetCost() string {
	return v.UberActivityMetadataFragment.Cost
}

// GetCity returns getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata.City, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata) GetCity() string {
	return v.UberActivityMetadataFragment.City
}

// GetDistance returns getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata.Distance, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata) GetDistance() string {
	return v.UberActivityMetadataFragment.Distance
}

// GetStatus returns getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata.Status, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata) GetStatus() TripStatus {
	return v.UberActivityMetadataFragment.Status
}

func (v *getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UberActivityMetadataFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata struct {
	Typename string `json:"__typename"`

	Subject []UberActivityMetadataFragmentSubjectIdentifier `json:"subject"`

	BeginTripTime time.Time `json:"beginTripTime"`

	DropoffTime time.Time `json:"dropoffTime"`

	Cost string `json:"cost"`

	City string `json:"city"`

	Distance string `json:"distance"`

	Status TripStatus `json:"status"`
}

func (v *getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata) __premarshalJSON() (*__premarshalgetActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata, error) {
	var retval __premarshalgetActivityGetActivityActivityResponseDataActivityMetadataUberActivityMetadata

	retval.Typename = v.Typename
	retval.Subject = v.UberActivityMetadataFragment.Subject
	retval.BeginTripTime = v.UberActivityMetadataFragment.BeginTripTime
	retval.DropoffTime = v.UberActivityMetadataFragment.DropoffTime
	retval.Cost = v.UberActivityMetadataFragment.Cost
	retval.City = v.UberActivityMetadataFragment.City
	retval.Distance = v.UberActivityMetadataFragment.Distance
	retval.Status = v.UberActivityMetadataFragment.Status
	return &retval, nil
}

// getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata includes the requested fields of the GraphQL type YoutubeActivityMetadata.
type getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata struct {
	Typename                        string `json:"__typename"`
	YoutubeActivityMetadataFragment `json:"-"`
}

// GetTypename returns getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata) GetTypename() string {
	return v.Typename
}

// GetTitle returns getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata.Title, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata) GetTitle() string {
	return v.YoutubeActivityMetadataFragment.Title
}

// GetSubject returns getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata) GetSubject() []YoutubeActivityMetadataFragmentSubjectIdentifier {
	return v.YoutubeActivityMetadataFragment.Subject
}

// GetDate returns getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata.Date, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata) GetDate() graphqlTypes.Date {
	return v.YoutubeActivityMetadataFragment.Date
}

// GetPercentageWatched returns getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata.PercentageWatched, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata) GetPercentageWatched() int {
	return v.YoutubeActivityMetadataFragment.PercentageWatched
}

// GetContentType returns getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata.ContentType, and is useful for accessing the field via an interface.
func (v *getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata) GetContentType() ContentType {
	return v.YoutubeActivityMetadataFragment.ContentType
}

func (v *getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.YoutubeActivityMetadataFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata struct {
	Typename string `json:"__typename"`

	Title string `json:"title"`

	Subject []YoutubeActivityMetadataFragmentSubjectIdentifier `json:"subject"`

	Date graphqlTypes.Date `json:"date"`

	PercentageWatched int `json:"percentageWatched"`

	ContentType ContentType `json:"contentType"`
}

func (v *getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata) __premarshalJSON() (*__premarshalgetActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata, error) {
	var retval __premarshalgetActivityGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata

	retval.Typename = v.Typename
	retval.Title = v.YoutubeActivityMetadataFragment.Title
	retval.Subject = v.YoutubeActivityMetadataFragment.Subject
	retval.Date = v.YoutubeActivityMetadataFragment.Date
	retval.PercentageWatched = v.YoutubeActivityMetadataFragment.PercentageWatched
	retval.ContentType = v.YoutubeActivityMetadataFragment.ContentType
	return &retval, nil
}

// getActivityResponse is returned by getActivity on success.
type getActivityResponse struct {
	GetActivity getActivityGetActivityActivityResponse `json:"getActivity"`
}

// GetGetActivity returns getActivityResponse.GetActivity, and is useful for accessing the field via an interface.
func (v *getActivityResponse) GetGetActivity() getActivityGetActivityActivityResponse {
	return v.GetActivity
}

// getAppByPublicKeyGetAppByPublicKeyApplication includes the requested fields of the GraphQL type Application.
type getAppByPublicKeyGetAppByPublicKeyApplication struct {
	AppName      string             `json:"appName"`
	PublicKey    string             `json:"publicKey"`
	IconURL      string             `json:"iconURL"`
	GandalfID    graphqlTypes.Int64 `json:"gandalfID"`
	AppRegistrar string             `json:"appRegistrar"`
}

// GetAppName returns getAppByPublicKeyGetAppByPublicKeyApplication.AppName, and is useful for accessing the field via an interface.
func (v *getAppByPublicKeyGetAppByPublicKeyApplication) GetAppName() string { return v.AppName }

// GetPublicKey returns getAppByPublicKeyGetAppByPublicKeyApplication.PublicKey, and is useful for accessing the field via an interface.
func (v *getAppByPublicKeyGetAppByPublicKeyApplication) GetPublicKey() string { return v.PublicKey }

// GetIconURL returns getAppByPublicKeyGetAppByPublicKeyApplication.IconURL, and is useful for accessing the field via an interface.
func (v *getAppByPublicKeyGetAppByPublicKeyApplication) GetIconURL() string { return v.IconURL }

// GetGandalfID returns getAppByPublicKeyGetAppByPublicKeyApplication.GandalfID, and is useful for accessing the field via an interface.
func (v *getAppByPublicKeyGetAppByPublicKeyApplication) GetGandalfID() graphqlTypes.Int64 {
	return v.GandalfID
}

// GetAppRegistrar returns getAppByPublicKeyGetAppByPublicKeyApplication.AppRegistrar, and is useful for accessing the field via an interface.
func (v *getAppByPublicKeyGetAppByPublicKeyApplication) GetAppRegistrar() string {
	return v.AppRegistrar
}

// getAppByPublicKeyResponse is returned by getAppByPublicKey on success.
type getAppByPublicKeyResponse struct {
	GetAppByPublicKey getAppByPublicKeyGetAppByPublicKeyApplication `json:"getAppByPublicKey"`
}

// GetGetAppByPublicKey returns getAppByPublicKeyResponse.GetAppByPublicKey, and is useful for accessing the field via an interface.
func (v *getAppByPublicKeyResponse) GetGetAppByPublicKey() getAppByPublicKeyGetAppByPublicKeyApplication {
	return v.GetAppByPublicKey
}

// getTraitsGetTraitsTrait includes the requested fields of the GraphQL type Trait.
type getTraitsGetTraitsTrait struct {
	Id        graphqlTypes.UUID `json:"id"`
	Source    Source            `json:"source"`
	Label     TraitLabel        `json:"label"`
	Value     string            `json:"value"`
	Timestamp time.Time         `json:"timestamp"`
}

// GetId returns getTraitsGetTraitsTrait.Id, and is useful for accessing the field via an interface.
func (v *getTraitsGetTraitsTrait) GetId() graphqlTypes.UUID { return v.Id }

// GetSource returns getTraitsGetTraitsTrait.Source, and is useful for accessing the field via an interface.
func (v *getTraitsGetTraitsTrait) GetSource() Source { return v.Source }

// GetLabel returns getTraitsGetTraitsTrait.Label, and is useful for accessing the field via an interface.
func (v *getTraitsGetTraitsTrait) GetLabel() TraitLabel { return v.Label }

// GetValue returns getTraitsGetTraitsTrait.Value, and is useful for accessing the field via an interface.
func (v *getTraitsGetTraitsTrait) GetValue() string { return v.Value }

// GetTimestamp returns getTraitsGetTraitsTrait.Timestamp, and is useful for accessing the field via an interface.
func (v *getTraitsGetTraitsTrait) GetTimestamp() time.Time { return v.Timestamp }

// getTraitsResponse is returned by getTraits on success.
type getTraitsResponse struct {
	GetTraits []getTraitsGetTraitsTrait `json:"getTraits"`
}

// GetGetTraits returns getTraitsResponse.GetTraits, and is useful for accessing the field via an interface.
func (v *getTraitsResponse) GetGetTraits() []getTraitsGetTraitsTrait { return v.GetTraits }

// lookupActivityLookupActivity includes the requested fields of the GraphQL type Activity.
type lookupActivityLookupActivity struct {
	Id       string                               `json:"id"`
	Metadata lookupActivityLookupActivityMetadata `json:"-"`
}

// GetId returns lookupActivityLookupActivity.Id, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivity) GetId() string { return v.Id }

// GetMetadata returns lookupActivityLookupActivity.Metadata, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivity) GetMetadata() lookupActivityLookupActivityMetadata {
	return v.Metadata
}

func (v *lookupActivityLookupActivity) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*lookupActivityLookupActivity
		Metadata json.RawMessage `json:"metadata"`
		graphql.NoUnmarshalJSON
	}
	firstPass.lookupActivityLookupActivity = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Metadata
		src := firstPass.Metadata
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshallookupActivityLookupActivityMetadata(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal lookupActivityLookupActivity.Metadata: %w", err)
			}
		}
	}
	return nil
}

type __premarshallookupActivityLookupActivity struct {
	Id string `json:"id"`

	Metadata json.RawMessage `json:"metadata"`
}

func (v *lookupActivityLookupActivity) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *lookupActivityLookupActivity) __premarshalJSON() (*__premarshallookupActivityLookupActivity, error) {
	var retval __premarshallookupActivityLookupActivity

	retval.Id = v.Id
	{

		dst := &retval.Metadata
		src := v.Metadata
		var err error
		*dst, err = __marshallookupActivityLookupActivityMetadata(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal lookupActivityLookupActivity.Metadata: %w", err)
		}
	}
	return &retval, nil
}

// lookupActivityLookupActivityMetadata includes the requested fields of the GraphQL interface ActivityMetadata.
//
// lookupActivityLookupActivityMetadata is implemented by the following types:
// lookupActivityLookupActivityMetadataAmazonActivityMetadata
// lookupActivityLookupActivityMetadataInstacartActivityMetadata
// lookupActivityLookupActivityMetadataNetflixActivityMetadata
// lookupActivityLookupActivityMetadataPlaystationActivityMetadata
// lookupActivityLookupActivityMetadataUberActivityMetadata
// lookupActivityLookupActivityMetadataYoutubeActivityMetadata
type lookupActivityLookupActivityMetadata interface {
	implementsGraphQLInterfacelookupActivityLookupActivityMetadata()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *lookupActivityLookupActivityMetadataAmazonActivityMetadata) implementsGraphQLInterfacelookupActivityLookupActivityMetadata() {
}
func (v *lookupActivityLookupActivityMetadataInstacartActivityMetadata) implementsGraphQLInterfacelookupActivityLookupActivityMetadata() {
}
func (v *lookupActivityLookupActivityMetadataNetflixActivityMetadata) implementsGraphQLInterfacelookupActivityLookupActivityMetadata() {
}
func (v *lookupActivityLookupActivityMetadataPlaystationActivityMetadata) implementsGraphQLInterfacelookupActivityLookupActivityMetadata() {
}
func (v *lookupActivityLookupActivityMetadataUberActivityMetadata) implementsGraphQLInterfacelookupActivityLookupActivityMetadata() {
}
func (v *lookupActivityLookupActivityMetadataYoutubeActivityMetadata) implementsGraphQLInterfacelookupActivityLookupActivityMetadata() {
}

func __unmarshallookupActivityLookupActivityMetadata(b []byte, v *lookupActivityLookupActivityMetadata) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AmazonActivityMetadata":
		*v = new(lookupActivityLookupActivityMetadataAmazonActivityMetadata)
		return json.Unmarshal(b, *v)
	case "InstacartActivityMetadata":
		*v = new(lookupActivityLookupActivityMetadataInstacartActivityMetadata)
		return json.Unmarshal(b, *v)
	case "NetflixActivityMetadata":
		*v = new(lookupActivityLookupActivityMetadataNetflixActivityMetadata)
		return json.Unmarshal(b, *v)
	case "PlaystationActivityMetadata":
		*v = new(lookupActivityLookupActivityMetadataPlaystationActivityMetadata)
		return json.Unmarshal(b, *v)
	case "UberActivityMetadata":
		*v = new(lookupActivityLookupActivityMetadataUberActivityMetadata)
		return json.Unmarshal(b, *v)
	case "YoutubeActivityMetadata":
		*v = new(lookupActivityLookupActivityMetadataYoutubeActivityMetadata)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ActivityMetadata.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for lookupActivityLookupActivityMetadata: "%v"`, tn.TypeName)
	}
}

func __marshallookupActivityLookupActivityMetadata(v *lookupActivityLookupActivityMetadata) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *lookupActivityLookupActivityMetadataAmazonActivityMetadata:
		typename = "AmazonActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshallookupActivityLookupActivityMetadataAmazonActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *lookupActivityLookupActivityMetadataInstacartActivityMetadata:
		typename = "InstacartActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshallookupActivityLookupActivityMetadataInstacartActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *lookupActivityLookupActivityMetadataNetflixActivityMetadata:
		typename = "NetflixActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshallookupActivityLookupActivityMetadataNetflixActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *lookupActivityLookupActivityMetadataPlaystationActivityMetadata:
		typename = "PlaystationActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshallookupActivityLookupActivityMetadataPlaystationActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *lookupActivityLookupActivityMetadataUberActivityMetadata:
		typename = "UberActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshallookupActivityLookupActivityMetadataUberActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *lookupActivityLookupActivityMetadataYoutubeActivityMetadata:
		typename = "YoutubeActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshallookupActivityLookupActivityMetadataYoutubeActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for lookupActivityLookupActivityMetadata: "%T"`, v)
	}
}

// lookupActivityLookupActivityMetadataAmazonActivityMetadata includes the requested fields of the GraphQL type AmazonActivityMetadata.
type lookupActivityLookupActivityMetadataAmazonActivityMetadata struct {
	Typename                       string `json:"__typename"`
	AmazonActivityMetadataFragment `json:"-"`
}

// GetTypename returns lookupActivityLookupActivityMetadataAmazonActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataAmazonActivityMetadata) GetTypename() string {
	return v.Typename
}

// GetProductName returns lookupActivityLookupActivityMetadataAmazonActivityMetadata.ProductName, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataAmazonActivityMetadata) GetProductName() string {
	return v.AmazonActivityMetadataFragment.ProductName
}

// GetSubject returns lookupActivityLookupActivityMetadataAmazonActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataAmazonActivityMetadata) GetSubject() []AmazonActivityMetadataFragmentSubjectIdentifier {
	return v.AmazonActivityMetadataFragment.Subject
}

// GetDate returns lookupActivityLookupActivityMetadataAmazonActivityMetadata.Date, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataAmazonActivityMetadata) GetDate() graphqlTypes.Date {
	return v.AmazonActivityMetadataFragment.Date
}

// GetQuantityPurchased returns lookupActivityLookupActivityMetadataAmazonActivityMetadata.QuantityPurchased, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataAmazonActivityMetadata) GetQuantityPurchased() int {
	return v.AmazonActivityMetadataFragment.QuantityPurchased
}

// GetTotalCost returns lookupActivityLookupActivityMetadataAmazonActivityMetadata.TotalCost, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataAmazonActivityMetadata) GetTotalCost() string {
	return v.AmazonActivityMetadataFragment.TotalCost
}

func (v *lookupActivityLookupActivityMetadataAmazonActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*lookupActivityLookupActivityMetadataAmazonActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.lookupActivityLookupActivityMetadataAmazonActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AmazonActivityMetadataFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallookupActivityLookupActivityMetadataAmazonActivityMetadata struct {
	Typename string `json:"__typename"`

	ProductName string `json:"productName"`

	Subject []AmazonActivityMetadataFragmentSubjectIdentifier `json:"subject"`

	Date graphqlTypes.Date `json:"date"`

	QuantityPurchased int `json:"quantityPurchased"`

	TotalCost string `json:"totalCost"`
}

func (v *lookupActivityLookupActivityMetadataAmazonActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *lookupActivityLookupActivityMetadataAmazonActivityMetadata) __premarshalJSON() (*__premarshallookupActivityLookupActivityMetadataAmazonActivityMetadata, error) {
	var retval __premarshallookupActivityLookupActivityMetadataAmazonActivityMetadata

	retval.Typename = v.Typename
	retval.ProductName = v.AmazonActivityMetadataFragment.ProductName
	retval.Subject = v.AmazonActivityMetadataFragment.Subject
	retval.Date = v.AmazonActivityMetadataFragment.Date
	retval.QuantityPurchased = v.AmazonActivityMetadataFragment.QuantityPurchased
	retval.TotalCost = v.AmazonActivityMetadataFragment.TotalCost
	return &retval, nil
}

// lookupActivityLookupActivityMetadataInstacartActivityMetadata includes the requested fields of the GraphQL type InstacartActivityMetadata.
type lookupActivityLookupActivityMetadataInstacartActivityMetadata struct {
	Typename                          string `json:"__typename"`
	InstacartActivityMetadataFragment `json:"-"`
}

// GetTypename returns lookupActivityLookupActivityMetadataInstacartActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataInstacartActivityMetadata) GetTypename() string {
	return v.Typename
}

// GetSubject returns lookupActivityLookupActivityMetadataInstacartActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataInstacartActivityMetadata) GetSubject() []InstacartActivityMetadataFragmentSubjectIdentifier {
	return v.InstacartActivityMetadataFragment.Subject
}

// GetRetailer returns lookupActivityLookupActivityMetadataInstacartActivityMetadata.Retailer, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataInstacartActivityMetadata) GetRetailer() string {
	return v.InstacartActivityMetadataFragment.Retailer
}

// GetTotalOrderAmountSpent returns lookupActivityLookupActivityMetadataInstacartActivityMetadata.TotalOrderAmountSpent, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataInstacartActivityMetadata) GetTotalOrderAmountSpent() string {
	return v.InstacartActivityMetadataFragment.TotalOrderAmountSpent
}

// GetDateOrdered returns lookupActivityLookupActivityMetadataInstacartActivityMetadata.DateOrdered, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataInstacartActivityMetadata) GetDateOrdered() graphqlTypes.Date {
	return v.InstacartActivityMetadataFragment.DateOrdered
}

// GetDateDelivered returns lookupActivityLookupActivityMetadataInstacartActivityMetadata.DateDelivered, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataInstacartActivityMetadata) GetDateDelivered() graphqlTypes.Date {
	return v.InstacartActivityMetadataFragment.DateDelivered
}

// GetStatusString returns lookupActivityLookupActivityMetadataInstacartActivityMetadata.StatusString, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataInstacartActivityMetadata) GetStatusString() string {
	return v.InstacartActivityMetadataFragment.StatusString
}

// GetItems returns lookupActivityLookupActivityMetadataInstacartActivityMetadata.Items, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataInstacartActivityMetadata) GetItems() []InstacartActivityMetadataFragmentItemsInstacartOrderItem {
	return v.InstacartActivityMetadataFragment.Items
}

func (v *lookupActivityLookupActivityMetadataInstacartActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*lookupActivityLookupActivityMetadataInstacartActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.lookupActivityLookupActivityMetadataInstacartActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InstacartActivityMetadataFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallookupActivityLookupActivityMetadataInstacartActivityMetadata struct {
	Typename string `json:"__typename"`

	Subject []InstacartActivityMetadataFragmentSubjectIdentifier `json:"subject"`

	Retailer string `json:"retailer"`

	TotalOrderAmountSpent string `json:"totalOrderAmountSpent"`

	DateOrdered graphqlTypes.Date `json:"dateOrdered"`

	DateDelivered graphqlTypes.Date `json:"dateDelivered"`

	StatusString string `json:"statusString"`

	Items []InstacartActivityMetadataFragmentItemsInstacartOrderItem `json:"items"`
}

func (v *lookupActivityLookupActivityMetadataInstacartActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *lookupActivityLookupActivityMetadataInstacartActivityMetadata) __premarshalJSON() (*__premarshallookupActivityLookupActivityMetadataInstacartActivityMetadata, error) {
	var retval __premarshallookupActivityLookupActivityMetadataInstacartActivityMetadata

	retval.Typename = v.Typename
	retval.Subject = v.InstacartActivityMetadataFragment.Subject
	retval.Retailer = v.InstacartActivityMetadataFragment.Retailer
	retval.TotalOrderAmountSpent = v.InstacartActivityMetadataFragment.TotalOrderAmountSpent
	retval.DateOrdered = v.InstacartActivityMetadataFragment.DateOrdered
	retval.DateDelivered = v.InstacartActivityMetadataFragment.DateDelivered
	retval.StatusString = v.InstacartActivityMetadataFragment.StatusString
	retval.Items = v.InstacartActivityMetadataFragment.Items
	return &retval, nil
}

// lookupActivityLookupActivityMetadataNetflixActivityMetadata includes the requested fields of the GraphQL type NetflixActivityMetadata.
type lookupActivityLookupActivityMetadataNetflixActivityMetadata struct {
	Typename                        string `json:"__typename"`
	NetflixActivityMetadataFragment `json:"-"`
}

// GetTypename returns lookupActivityLookupActivityMetadataNetflixActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataNetflixActivityMetadata) GetTypename() string {
	return v.Typename
}

// GetTitle returns lookupActivityLookupActivityMetadataNetflixActivityMetadata.Title, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataNetflixActivityMetadata) GetTitle() string {
	return v.NetflixActivityMetadataFragment.Title
}

// GetSubject returns lookupActivityLookupActivityMetadataNetflixActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataNetflixActivityMetadata) GetSubject() []NetflixActivityMetadataFragmentSubjectIdentifier {
	return v.NetflixActivityMetadataFragment.Subject
}

// GetDate returns lookupActivityLookupActivityMetadataNetflixActivityMetadata.Date, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataNetflixActivityMetadata) GetDate() graphqlTypes.Date {
	return v.NetflixActivityMetadataFragment.Date
}

// GetLastPlayedAt returns lookupActivityLookupActivityMetadataNetflixActivityMetadata.LastPlayedAt, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataNetflixActivityMetadata) GetLastPlayedAt() graphqlTypes.Date {
	return v.NetflixActivityMetadataFragment.LastPlayedAt
}

func (v *lookupActivityLookupActivityMetadataNetflixActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*lookupActivityLookupActivityMetadataNetflixActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.lookupActivityLookupActivityMetadataNetflixActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NetflixActivityMetadataFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallookupActivityLookupActivityMetadataNetflixActivityMetadata struct {
	Typename string `json:"__typename"`

	Title string `json:"title"`

	Subject []NetflixActivityMetadataFragmentSubjectIdentifier `json:"subject"`

	Date graphqlTypes.Date `json:"date"`

	LastPlayedAt graphqlTypes.Date `json:"lastPlayedAt"`
}

func (v *lookupActivityLookupActivityMetadataNetflixActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *lookupActivityLookupActivityMetadataNetflixActivityMetadata) __premarshalJSON() (*__premarshallookupActivityLookupActivityMetadataNetflixActivityMetadata, error) {
	var retval __premarshallookupActivityLookupActivityMetadataNetflixActivityMetadata

	retval.Typename = v.Typename
	retval.Title = v.NetflixActivityMetadataFragment.Title
	retval.Subject = v.NetflixActivityMetadataFragment.Subject
	retval.Date = v.NetflixActivityMetadataFragment.Date
	retval.LastPlayedAt = v.NetflixActivityMetadataFragment.LastPlayedAt
	return &retval, nil
}

// lookupActivityLookupActivityMetadataPlaystationActivityMetadata includes the requested fields of the GraphQL type PlaystationActivityMetadata.
type lookupActivityLookupActivityMetadataPlaystationActivityMetadata struct {
	Typename                            string `json:"__typename"`
	PlaystationActivityMetadataFragment `json:"-"`
}

// GetTypename returns lookupActivityLookupActivityMetadataPlaystationActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataPlaystationActivityMetadata) GetTypename() string {
	return v.Typename
}

// GetTitle returns lookupActivityLookupActivityMetadataPlaystationActivityMetadata.Title, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataPlaystationActivityMetadata) GetTitle() string {
	return v.PlaystationActivityMetadataFragment.Title
}

// GetSubject returns lookupActivityLookupActivityMetadataPlaystationActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataPlaystationActivityMetadata) GetSubject() []PlaystationActivityMetadataFragmentSubjectIdentifier {
	return v.PlaystationActivityMetadataFragment.Subject
}

// GetLastPlayedAt returns lookupActivityLookupActivityMetadataPlaystationActivityMetadata.LastPlayedAt, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataPlaystationActivityMetadata) GetLastPlayedAt() graphqlTypes.Date {
	return v.PlaystationActivityMetadataFragment.LastPlayedAt
}

func (v *lookupActivityLookupActivityMetadataPlaystationActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*lookupActivityLookupActivityMetadataPlaystationActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.lookupActivityLookupActivityMetadataPlaystationActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PlaystationActivityMetadataFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallookupActivityLookupActivityMetadataPlaystationActivityMetadata struct {
	Typename string `json:"__typename"`

	Title string `json:"title"`

	Subject []PlaystationActivityMetadataFragmentSubjectIdentifier `json:"subject"`

	LastPlayedAt graphqlTypes.Date `json:"lastPlayedAt"`
}

func (v *lookupActivityLookupActivityMetadataPlaystationActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *lookupActivityLookupActivityMetadataPlaystationActivityMetadata) __premarshalJSON() (*__premarshallookupActivityLookupActivityMetadataPlaystationActivityMetadata, error) {
	var retval __premarshallookupActivityLookupActivityMetadataPlaystationActivityMetadata

	retval.Typename = v.Typename
	retval.Title = v.PlaystationActivityMetadataFragment.Title
	retval.Subject = v.PlaystationActivityMetadataFragment.Subject
	retval.LastPlayedAt = v.PlaystationActivityMetadataFragment.LastPlayedAt
	return &retval, nil
}

// lookupActivityLookupActivityMetadataUberActivityMetadata includes the requested fields of the GraphQL type UberActivityMetadata.
type lookupActivityLookupActivityMetadataUberActivityMetadata struct {
	Typename                     string `json:"__typename"`
	UberActivityMetadataFragment `json:"-"`
}

// GetTypename returns lookupActivityLookupActivityMetadataUberActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataUberActivityMetadata) GetTypename() string {
	return v.Typename
}

// GetSubject returns lookupActivityLookupActivityMetadataUberActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataUberActivityMetadata) GetSubject() []UberActivityMetadataFragmentSubjectIdentifier {
	return v.UberActivityMetadataFragment.Subject
}

// GetBeginTripTime returns lookupActivityLookupActivityMetadataUberActivityMetadata.BeginTripTime, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataUberActivityMetadata) GetBeginTripTime() time.Time {
	return v.UberActivityMetadataFragment.BeginTripTime
}

// GetDropoffTime returns lookupActivityLookupActivityMetadataUberActivityMetadata.DropoffTime, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataUberActivityMetadata) GetDropoffTime() time.Time {
	return v.UberActivityMetadataFragment.DropoffTime
}

// GetCost returns lookupActivityLookupActivityMetadataUberActivityMetadata.Cost, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataUberActivityMetadata) GetCost() string {
	return v.UberActivityMetadataFragment.Cost
}

// GetCity returns lookupActivityLookupActivityMetadataUberActivityMetadata.City, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataUberActivityMetadata) GetCity() string {
	return v.UberActivityMetadataFragment.City
}

// GetDistance returns lookupActivityLookupActivityMetadataUberActivityMetadata.Distance, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataUberActivityMetadata) GetDistance() string {
	return v.UberActivityMetadataFragment.Distance
}

// GetStatus returns lookupActivityLookupActivityMetadataUberActivityMetadata.Status, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataUberActivityMetadata) GetStatus() TripStatus {
	return v.UberActivityMetadataFragment.Status
}

func (v *lookupActivityLookupActivityMetadataUberActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*lookupActivityLookupActivityMetadataUberActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.lookupActivityLookupActivityMetadataUberActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UberActivityMetadataFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallookupActivityLookupActivityMetadataUberActivityMetadata struct {
	Typename string `json:"__typename"`

	Subject []UberActivityMetadataFragmentSubjectIdentifier `json:"subject"`

	BeginTripTime time.Time `json:"beginTripTime"`

	DropoffTime time.Time `json:"dropoffTime"`

	Cost string `json:"cost"`

	City string `json:"city"`

	Distance string `json:"distance"`

	Status TripStatus `json:"status"`
}

func (v *lookupActivityLookupActivityMetadataUberActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *lookupActivityLookupActivityMetadataUberActivityMetadata) __premarshalJSON() (*__premarshallookupActivityLookupActivityMetadataUberActivityMetadata, error) {
	var retval __premarshallookupActivityLookupActivityMetadataUberActivityMetadata

	retval.Typename = v.Typename
	retval.Subject = v.UberActivityMetadataFragment.Subject
	retval.BeginTripTime = v.UberActivityMetadataFragment.BeginTripTime
	retval.DropoffTime = v.UberActivityMetadataFragment.DropoffTime
	retval.Cost = v.UberActivityMetadataFragment.Cost
	retval.City = v.UberActivityMetadataFragment.City
	retval.Distance = v.UberActivityMetadataFragment.Distance
	retval.Status = v.UberActivityMetadataFragment.Status
	return &retval, nil
}

// lookupActivityLookupActivityMetadataYoutubeActivityMetadata includes the requested fields of the GraphQL type YoutubeActivityMetadata.
type lookupActivityLookupActivityMetadataYoutubeActivityMetadata struct {
	Typename                        string `json:"__typename"`
	YoutubeActivityMetadataFragment `json:"-"`
}

// GetTypename returns lookupActivityLookupActivityMetadataYoutubeActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataYoutubeActivityMetadata) GetTypename() string {
	return v.Typename
}

// GetTitle returns lookupActivityLookupActivityMetadataYoutubeActivityMetadata.Title, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataYoutubeActivityMetadata) GetTitle() string {
	return v.YoutubeActivityMetadataFragment.Title
}

// GetSubject returns lookupActivityLookupActivityMetadataYoutubeActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataYoutubeActivityMetadata) GetSubject() []YoutubeActivityMetadataFragmentSubjectIdentifier {
	return v.YoutubeActivityMetadataFragment.Subject
}

// GetDate returns lookupActivityLookupActivityMetadataYoutubeActivityMetadata.Date, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataYoutubeActivityMetadata) GetDate() graphqlTypes.Date {
	return v.YoutubeActivityMetadataFragment.Date
}

// GetPercentageWatched returns lookupActivityLookupActivityMetadataYoutubeActivityMetadata.PercentageWatched, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataYoutubeActivityMetadata) GetPercentageWatched() int {
	return v.YoutubeActivityMetadataFragment.PercentageWatched
}

// GetContentType returns lookupActivityLookupActivityMetadataYoutubeActivityMetadata.ContentType, and is useful for accessing the field via an interface.
func (v *lookupActivityLookupActivityMetadataYoutubeActivityMetadata) GetContentType() ContentType {
	return v.YoutubeActivityMetadataFragment.ContentType
}

func (v *lookupActivityLookupActivityMetadataYoutubeActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*lookupActivityLookupActivityMetadataYoutubeActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.lookupActivityLookupActivityMetadataYoutubeActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.YoutubeActivityMetadataFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallookupActivityLookupActivityMetadataYoutubeActivityMetadata struct {
	Typename string `json:"__typename"`

	Title string `json:"title"`

	Subject []YoutubeActivityMetadataFragmentSubjectIdentifier `json:"subject"`

	Date graphqlTypes.Date `json:"date"`

	PercentageWatched int `json:"percentageWatched"`

	ContentType ContentType `json:"contentType"`
}

func (v *lookupActivityLookupActivityMetadataYoutubeActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *lookupActivityLookupActivityMetadataYoutubeActivityMetadata) __premarshalJSON() (*__premarshallookupActivityLookupActivityMetadataYoutubeActivityMetadata, error) {
	var retval __premarshallookupActivityLookupActivityMetadataYoutubeActivityMetadata

	retval.Typename = v.Typename
	retval.Title = v.YoutubeActivityMetadataFragment.Title
	retval.Subject = v.YoutubeActivityMetadataFragment.Subject
	retval.Date = v.YoutubeActivityMetadataFragment.Date
	retval.PercentageWatched = v.YoutubeActivityMetadataFragment.PercentageWatched
	retval.ContentType = v.YoutubeActivityMetadataFragment.ContentType
	return &retval, nil
}

// lookupActivityResponse is returned by lookupActivity on success.
type lookupActivityResponse struct {
	LookupActivity lookupActivityLookupActivity `json:"lookupActivity"`
}

// GetLookupActivity returns lookupActivityResponse.LookupActivity, and is useful for accessing the field via an interface.
func (v *lookupActivityResponse) GetLookupActivity() lookupActivityLookupActivity {
	return v.LookupActivity
}

// lookupTraitLookupTrait includes the requested fields of the GraphQL type Trait.
type lookupTraitLookupTrait struct {
	Id        graphqlTypes.UUID `json:"id"`
	Source    Source            `json:"source"`
	Label     TraitLabel        `json:"label"`
	Value     string            `json:"value"`
	Timestamp time.Time         `json:"timestamp"`
}

// GetId returns lookupTraitLookupTrait.Id, and is useful for accessing the field via an interface.
func (v *lookupTraitLookupTrait) GetId() graphqlTypes.UUID { return v.Id }

// GetSource returns lookupTraitLookupTrait.Source, and is useful for accessing the field via an interface.
func (v *lookupTraitLookupTrait) GetSource() Source { return v.Source }

// GetLabel returns lookupTraitLookupTrait.Label, and is useful for accessing the field via an interface.
func (v *lookupTraitLookupTrait) GetLabel() TraitLabel { return v.Label }

// GetValue returns lookupTraitLookupTrait.Value, and is useful for accessing the field via an interface.
func (v *lookupTraitLookupTrait) GetValue() string { return v.Value }

// GetTimestamp returns lookupTraitLookupTrait.Timestamp, and is useful for accessing the field via an interface.
func (v *lookupTraitLookupTrait) GetTimestamp() time.Time { return v.Timestamp }

// lookupTraitResponse is returned by lookupTrait on success.
type lookupTraitResponse struct {
	LookupTrait lookupTraitLookupTrait `json:"lookupTrait"`
}

// GetLookupTrait returns lookupTraitResponse.LookupTrait, and is useful for accessing the field via an interface.
func (v *lookupTraitResponse) GetLookupTrait() lookupTraitLookupTrait { return v.LookupTrait }

// The query or mutation executed by getActivity.
const getActivity_Operation = `
query getActivity ($dataKey: String!, $source: Source!, $limit: Int64!, $page: Int64!) {
	getActivity(dataKey: $dataKey, source: $source, limit: $limit, page: $page) {
		... on ActivityResponse {
			data {
				... on Activity {
					id
					metadata {
						__typename
						... NetflixActivityMetadataFragment
						... PlaystationActivityMetadataFragment
						... AmazonActivityMetadataFragment
						... YoutubeActivityMetadataFragment
						... UberActivityMetadataFragment
						... InstacartActivityMetadataFragment
					}
				}
			}
			limit
			total
			page
		}
	}
}
fragment NetflixActivityMetadataFragment on NetflixActivityMetadata {
	title
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	date
	lastPlayedAt
}
fragment PlaystationActivityMetadataFragment on PlaystationActivityMetadata {
	title
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	lastPlayedAt
}
fragment AmazonActivityMetadataFragment on AmazonActivityMetadata {
	productName
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	date
	quantityPurchased
	totalCost
}
fragment YoutubeActivityMetadataFragment on YoutubeActivityMetadata {
	title
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	date
	percentageWatched
	contentType
}
fragment UberActivityMetadataFragment on UberActivityMetadata {
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	beginTripTime
	dropoffTime
	cost
	city
	distance
	status
}
fragment InstacartActivityMetadataFragment on InstacartActivityMetadata {
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	retailer
	totalOrderAmountSpent
	dateOrdered
	dateDelivered
	statusString
	items {
		... on InstacartOrderItem {
			itemID
			productName
			unitPrice
			status
			quantityPurchased
		}
	}
}
`

func (eye EyeOfSauron) GetActivity(
	ctx_ context.Context,
	dataKey string,
	source Source,
	limit graphqlTypes.Int64,
	page graphqlTypes.Int64,
) (*getActivityResponse, error) {
	req := graphql2.NewRequest(getActivity_Operation)

	req.Var("dataKey", dataKey)
	req.Var("source", source)
	req.Var("limit", limit)
	req.Var("page", page)
	requestBodyObj := struct {
		Query     string                 `json:"query"`
		Variables map[string]interface{} `json:"variables"`
	}{
		Query:     req.Query(),
		Variables: req.Vars(),
	}

	var requestBody bytes.Buffer
	if err := json.NewEncoder(&requestBody).Encode(requestBodyObj); err != nil {
		return nil, fmt.Errorf("unable to encode body %s", err)
	}

	var err_ error
	signatureB64, err_ := SignMessageAsBase64(eye.privateKey, requestBody.Bytes())
	if err_ != nil {
		return nil, fmt.Errorf("unable to generate signature: %v", err_)
	}

	req.Header.Set("X-Gandalf-Signature", signatureB64)

	var data_ getActivityResponse
	resp_ := &graphql.Response{Data: &data_}

	if err_ := eye.client.Run(
		ctx_,
		req,
		&resp_,
	); err_ != nil {
		return nil, fmt.Errorf("failed to execute request: %v", err_)
	}

	return &data_, nil
}

// The query or mutation executed by getAppByPublicKey.
const getAppByPublicKey_Operation = `
query getAppByPublicKey ($publicKey: String!) {
	getAppByPublicKey(publicKey: $publicKey) {
		... on Application {
			appName
			publicKey
			iconURL
			gandalfID
			appRegistrar
		}
	}
}
`

func (eye EyeOfSauron) GetAppByPublicKey(
	ctx_ context.Context,
	publicKey string,
) (*getAppByPublicKeyResponse, error) {
	req := graphql2.NewRequest(getAppByPublicKey_Operation)

	req.Var("publicKey", publicKey)
	requestBodyObj := struct {
		Query     string                 `json:"query"`
		Variables map[string]interface{} `json:"variables"`
	}{
		Query:     req.Query(),
		Variables: req.Vars(),
	}

	var requestBody bytes.Buffer
	if err := json.NewEncoder(&requestBody).Encode(requestBodyObj); err != nil {
		return nil, fmt.Errorf("unable to encode body %s", err)
	}

	var err_ error
	signatureB64, err_ := SignMessageAsBase64(eye.privateKey, requestBody.Bytes())
	if err_ != nil {
		return nil, fmt.Errorf("unable to generate signature: %v", err_)
	}

	req.Header.Set("X-Gandalf-Signature", signatureB64)

	var data_ getAppByPublicKeyResponse
	resp_ := &graphql.Response{Data: &data_}

	if err_ := eye.client.Run(
		ctx_,
		req,
		&resp_,
	); err_ != nil {
		return nil, fmt.Errorf("failed to execute request: %v", err_)
	}

	return &data_, nil
}

// The query or mutation executed by getTraits.
const getTraits_Operation = `
query getTraits ($dataKey: String!, $source: Source!, $labels: [TraitLabel]!) {
	getTraits(dataKey: $dataKey, source: $source, labels: $labels) {
		... on Trait {
			id
			source
			label
			value
			timestamp
		}
	}
}
`

func (eye EyeOfSauron) GetTraits(
	ctx_ context.Context,
	dataKey string,
	source Source,
	labels []TraitLabel,
) (*getTraitsResponse, error) {
	req := graphql2.NewRequest(getTraits_Operation)

	req.Var("dataKey", dataKey)
	req.Var("source", source)
	req.Var("labels", labels)
	requestBodyObj := struct {
		Query     string                 `json:"query"`
		Variables map[string]interface{} `json:"variables"`
	}{
		Query:     req.Query(),
		Variables: req.Vars(),
	}

	var requestBody bytes.Buffer
	if err := json.NewEncoder(&requestBody).Encode(requestBodyObj); err != nil {
		return nil, fmt.Errorf("unable to encode body %s", err)
	}

	var err_ error
	signatureB64, err_ := SignMessageAsBase64(eye.privateKey, requestBody.Bytes())
	if err_ != nil {
		return nil, fmt.Errorf("unable to generate signature: %v", err_)
	}

	req.Header.Set("X-Gandalf-Signature", signatureB64)

	var data_ getTraitsResponse
	resp_ := &graphql.Response{Data: &data_}

	if err_ := eye.client.Run(
		ctx_,
		req,
		&resp_,
	); err_ != nil {
		return nil, fmt.Errorf("failed to execute request: %v", err_)
	}

	return &data_, nil
}

// The query or mutation executed by lookupActivity.
const lookupActivity_Operation = `
query lookupActivity ($dataKey: String!, $activityId: UUID!) {
	lookupActivity(dataKey: $dataKey, activityId: $activityId) {
		... on Activity {
			id
			metadata {
				__typename
				... NetflixActivityMetadataFragment
				... PlaystationActivityMetadataFragment
				... AmazonActivityMetadataFragment
				... YoutubeActivityMetadataFragment
				... UberActivityMetadataFragment
				... InstacartActivityMetadataFragment
			}
		}
	}
}
fragment NetflixActivityMetadataFragment on NetflixActivityMetadata {
	title
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	date
	lastPlayedAt
}
fragment PlaystationActivityMetadataFragment on PlaystationActivityMetadata {
	title
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	lastPlayedAt
}
fragment AmazonActivityMetadataFragment on AmazonActivityMetadata {
	productName
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	date
	quantityPurchased
	totalCost
}
fragment YoutubeActivityMetadataFragment on YoutubeActivityMetadata {
	title
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	date
	percentageWatched
	contentType
}
fragment UberActivityMetadataFragment on UberActivityMetadata {
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	beginTripTime
	dropoffTime
	cost
	city
	distance
	status
}
fragment InstacartActivityMetadataFragment on InstacartActivityMetadata {
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	retailer
	totalOrderAmountSpent
	dateOrdered
	dateDelivered
	statusString
	items {
		... on InstacartOrderItem {
			itemID
			productName
			unitPrice
			status
			quantityPurchased
		}
	}
}
`

func (eye EyeOfSauron) LookupActivity(
	ctx_ context.Context,
	dataKey string,
	activityId graphqlTypes.UUID,
) (*lookupActivityResponse, error) {
	req := graphql2.NewRequest(lookupActivity_Operation)

	req.Var("dataKey", dataKey)
	req.Var("activityId", activityId)
	requestBodyObj := struct {
		Query     string                 `json:"query"`
		Variables map[string]interface{} `json:"variables"`
	}{
		Query:     req.Query(),
		Variables: req.Vars(),
	}

	var requestBody bytes.Buffer
	if err := json.NewEncoder(&requestBody).Encode(requestBodyObj); err != nil {
		return nil, fmt.Errorf("unable to encode body %s", err)
	}

	var err_ error
	signatureB64, err_ := SignMessageAsBase64(eye.privateKey, requestBody.Bytes())
	if err_ != nil {
		return nil, fmt.Errorf("unable to generate signature: %v", err_)
	}

	req.Header.Set("X-Gandalf-Signature", signatureB64)

	var data_ lookupActivityResponse
	resp_ := &graphql.Response{Data: &data_}

	if err_ := eye.client.Run(
		ctx_,
		req,
		&resp_,
	); err_ != nil {
		return nil, fmt.Errorf("failed to execute request: %v", err_)
	}

	return &data_, nil
}

// The query or mutation executed by lookupTrait.
const lookupTrait_Operation = `
query lookupTrait ($dataKey: String!, $traitId: UUID!) {
	lookupTrait(dataKey: $dataKey, traitId: $traitId) {
		... on Trait {
			id
			source
			label
			value
			timestamp
		}
	}
}
`

func (eye EyeOfSauron) LookupTrait(
	ctx_ context.Context,
	dataKey string,
	traitId graphqlTypes.UUID,
) (*lookupTraitResponse, error) {
	req := graphql2.NewRequest(lookupTrait_Operation)

	req.Var("dataKey", dataKey)
	req.Var("traitId", traitId)
	requestBodyObj := struct {
		Query     string                 `json:"query"`
		Variables map[string]interface{} `json:"variables"`
	}{
		Query:     req.Query(),
		Variables: req.Vars(),
	}

	var requestBody bytes.Buffer
	if err := json.NewEncoder(&requestBody).Encode(requestBodyObj); err != nil {
		return nil, fmt.Errorf("unable to encode body %s", err)
	}

	var err_ error
	signatureB64, err_ := SignMessageAsBase64(eye.privateKey, requestBody.Bytes())
	if err_ != nil {
		return nil, fmt.Errorf("unable to generate signature: %v", err_)
	}

	req.Header.Set("X-Gandalf-Signature", signatureB64)

	var data_ lookupTraitResponse
	resp_ := &graphql.Response{Data: &data_}

	if err_ := eye.client.Run(
		ctx_,
		req,
		&resp_,
	); err_ != nil {
		return nil, fmt.Errorf("failed to execute request: %v", err_)
	}

	return &data_, nil
}
