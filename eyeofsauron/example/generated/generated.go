// Code generated by github.com/gandalf-network/gandalf-sdk-go/eyeofsauron, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"crypto/ecdsa"
	"crypto/rand"
	"crypto/sha256"
	"encoding/base64"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/btcsuite/btcd/btcec/v2"
	"github.com/gandalf-network/gandalf-sdk-go/eyeofsauron/graphqlTypes"
	graphql2 "github.com/machinebox/graphql"
)

type EyeOfSauron struct {
	client     *graphql2.Client
	privateKey *ecdsa.PrivateKey
}

func NewEyeOfSauron(privateKey string) (*EyeOfSauron, error) {
	client := graphql2.NewClient("http://localhost:1000/public/gql")
	privKey, err := HexToECDSAPrivateKey(privateKey)
	if err != nil {
		return nil, fmt.Errorf("failed to parse private key: %v", err)
	}
	return &EyeOfSauron{
		privateKey: privKey,
		client:     client,
	}, nil
}

// HexToECDSAPrivateKey converts a hexadecimal string representing a private key
// into an *ecdsa.PrivateKey for the secp256k1 curve.
func HexToECDSAPrivateKey(hexKey string) (*ecdsa.PrivateKey, error) {
	trimmedHexKey := strings.TrimPrefix(hexKey, "0x")

	privKeyBytes, err := hex.DecodeString(trimmedHexKey)
	if err != nil {
		return nil, fmt.Errorf("failed to decode hex string: %v", err)
	}

	privKey, _ := btcec.PrivKeyFromBytes(privKeyBytes)

	return privKey.ToECDSA(), nil
}

// SignMessage signs a message using the given ECDSA private key.
func SignMessageAsBase64(privKey *ecdsa.PrivateKey, message []byte) (string, error) {
	hash := sha256.Sum256(message)

	signature, err := ecdsa.SignASN1(rand.Reader, privKey, hash[:])
	if err != nil {
		return "", fmt.Errorf("failed to sign message: %v", err)
	}

	signatureB64 := base64.StdEncoding.EncodeToString(signature)

	return signatureB64, nil
}

// AmazonActivityMetadata includes the GraphQL fields of AmazonActivityMetadata requested by the fragment AmazonActivityMetadata.
type AmazonActivityMetadata struct {
	ProductName       string                                    `json:"productName"`
	Subject           []AmazonActivityMetadataSubjectIdentifier `json:"subject"`
	Date              graphqlTypes.Date                         `json:"date"`
	QuantityPurchased int                                       `json:"quantityPurchased"`
	TotalCost         string                                    `json:"totalCost"`
}

// GetProductName returns AmazonActivityMetadata.ProductName, and is useful for accessing the field via an interface.
func (v *AmazonActivityMetadata) GetProductName() string { return v.ProductName }

// GetSubject returns AmazonActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *AmazonActivityMetadata) GetSubject() []AmazonActivityMetadataSubjectIdentifier {
	return v.Subject
}

// GetDate returns AmazonActivityMetadata.Date, and is useful for accessing the field via an interface.
func (v *AmazonActivityMetadata) GetDate() graphqlTypes.Date { return v.Date }

// GetQuantityPurchased returns AmazonActivityMetadata.QuantityPurchased, and is useful for accessing the field via an interface.
func (v *AmazonActivityMetadata) GetQuantityPurchased() int { return v.QuantityPurchased }

// GetTotalCost returns AmazonActivityMetadata.TotalCost, and is useful for accessing the field via an interface.
func (v *AmazonActivityMetadata) GetTotalCost() string { return v.TotalCost }

// AmazonActivityMetadataSubjectIdentifier includes the requested fields of the GraphQL type Identifier.
type AmazonActivityMetadataSubjectIdentifier struct {
	Value          string         `json:"value"`
	IdentifierType IdentifierType `json:"identifierType"`
}

// GetValue returns AmazonActivityMetadataSubjectIdentifier.Value, and is useful for accessing the field via an interface.
func (v *AmazonActivityMetadataSubjectIdentifier) GetValue() string { return v.Value }

// GetIdentifierType returns AmazonActivityMetadataSubjectIdentifier.IdentifierType, and is useful for accessing the field via an interface.
func (v *AmazonActivityMetadataSubjectIdentifier) GetIdentifierType() IdentifierType {
	return v.IdentifierType
}

type ContentType string

const (
	ContentTypeVideo  ContentType = "VIDEO"
	ContentTypeShorts ContentType = "SHORTS"
	ContentTypeMusic  ContentType = "MUSIC"
)

// GetActivityActivityResponse includes the requested fields of the GraphQL type ActivityResponse.
type GetActivityActivityResponse struct {
	Data  []GetActivityActivityResponseDataActivity `json:"data"`
	Limit graphqlTypes.Int64                        `json:"limit"`
	Total graphqlTypes.Int64                        `json:"total"`
	Page  graphqlTypes.Int64                        `json:"page"`
}

// GetData returns GetActivityActivityResponse.Data, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponse) GetData() []GetActivityActivityResponseDataActivity {
	return v.Data
}

// GetLimit returns GetActivityActivityResponse.Limit, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponse) GetLimit() graphqlTypes.Int64 { return v.Limit }

// GetTotal returns GetActivityActivityResponse.Total, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponse) GetTotal() graphqlTypes.Int64 { return v.Total }

// GetPage returns GetActivityActivityResponse.Page, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponse) GetPage() graphqlTypes.Int64 { return v.Page }

// GetActivityActivityResponseDataActivity includes the requested fields of the GraphQL type Activity.
type GetActivityActivityResponseDataActivity struct {
	Id       string                                          `json:"id"`
	Metadata GetActivityActivityResponseDataActivityMetadata `json:"-"`
}

// GetId returns GetActivityActivityResponseDataActivity.Id, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivity) GetId() string { return v.Id }

// GetMetadata returns GetActivityActivityResponseDataActivity.Metadata, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivity) GetMetadata() GetActivityActivityResponseDataActivityMetadata {
	return v.Metadata
}

func (v *GetActivityActivityResponseDataActivity) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetActivityActivityResponseDataActivity
		Metadata json.RawMessage `json:"metadata"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetActivityActivityResponseDataActivity = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Metadata
		src := firstPass.Metadata
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetActivityActivityResponseDataActivityMetadata(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetActivityActivityResponseDataActivity.Metadata: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetActivityActivityResponseDataActivity struct {
	Id string `json:"id"`

	Metadata json.RawMessage `json:"metadata"`
}

func (v *GetActivityActivityResponseDataActivity) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetActivityActivityResponseDataActivity) __premarshalJSON() (*__premarshalGetActivityActivityResponseDataActivity, error) {
	var retval __premarshalGetActivityActivityResponseDataActivity

	retval.Id = v.Id
	{

		dst := &retval.Metadata
		src := v.Metadata
		var err error
		*dst, err = __marshalGetActivityActivityResponseDataActivityMetadata(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetActivityActivityResponseDataActivity.Metadata: %w", err)
		}
	}
	return &retval, nil
}

// GetActivityActivityResponseDataActivityMetadata includes the requested fields of the GraphQL interface ActivityMetadata.
//
// GetActivityActivityResponseDataActivityMetadata is implemented by the following types:
// GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata
// GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata
// GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata
// GetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata
// GetActivityActivityResponseDataActivityMetadataUberActivityMetadata
// GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata
type GetActivityActivityResponseDataActivityMetadata interface {
	implementsGraphQLInterfaceGetActivityActivityResponseDataActivityMetadata()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata) implementsGraphQLInterfaceGetActivityActivityResponseDataActivityMetadata() {
}
func (v *GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) implementsGraphQLInterfaceGetActivityActivityResponseDataActivityMetadata() {
}
func (v *GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata) implementsGraphQLInterfaceGetActivityActivityResponseDataActivityMetadata() {
}
func (v *GetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata) implementsGraphQLInterfaceGetActivityActivityResponseDataActivityMetadata() {
}
func (v *GetActivityActivityResponseDataActivityMetadataUberActivityMetadata) implementsGraphQLInterfaceGetActivityActivityResponseDataActivityMetadata() {
}
func (v *GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata) implementsGraphQLInterfaceGetActivityActivityResponseDataActivityMetadata() {
}

func __unmarshalGetActivityActivityResponseDataActivityMetadata(b []byte, v *GetActivityActivityResponseDataActivityMetadata) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AmazonActivityMetadata":
		*v = new(GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata)
		return json.Unmarshal(b, *v)
	case "InstacartActivityMetadata":
		*v = new(GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata)
		return json.Unmarshal(b, *v)
	case "NetflixActivityMetadata":
		*v = new(GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata)
		return json.Unmarshal(b, *v)
	case "PlaystationActivityMetadata":
		*v = new(GetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata)
		return json.Unmarshal(b, *v)
	case "UberActivityMetadata":
		*v = new(GetActivityActivityResponseDataActivityMetadataUberActivityMetadata)
		return json.Unmarshal(b, *v)
	case "YoutubeActivityMetadata":
		*v = new(GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ActivityMetadata.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetActivityActivityResponseDataActivityMetadata: "%v"`, tn.TypeName)
	}
}

func __marshalGetActivityActivityResponseDataActivityMetadata(v *GetActivityActivityResponseDataActivityMetadata) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata:
		typename = "AmazonActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata:
		typename = "InstacartActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata:
		typename = "NetflixActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata:
		typename = "PlaystationActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetActivityActivityResponseDataActivityMetadataUberActivityMetadata:
		typename = "UberActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetActivityActivityResponseDataActivityMetadataUberActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata:
		typename = "YoutubeActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetActivityActivityResponseDataActivityMetadata: "%T"`, v)
	}
}

// GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata includes the requested fields of the GraphQL type AmazonActivityMetadata.
type GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata struct {
	Typename               string `json:"__typename"`
	AmazonActivityMetadata `json:"-"`
}

// GetTypename returns GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata) GetTypename() string {
	return v.Typename
}

// GetProductName returns GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata.ProductName, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata) GetProductName() string {
	return v.AmazonActivityMetadata.ProductName
}

// GetSubject returns GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata) GetSubject() []AmazonActivityMetadataSubjectIdentifier {
	return v.AmazonActivityMetadata.Subject
}

// GetDate returns GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata.Date, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata) GetDate() graphqlTypes.Date {
	return v.AmazonActivityMetadata.Date
}

// GetQuantityPurchased returns GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata.QuantityPurchased, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata) GetQuantityPurchased() int {
	return v.AmazonActivityMetadata.QuantityPurchased
}

// GetTotalCost returns GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata.TotalCost, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata) GetTotalCost() string {
	return v.AmazonActivityMetadata.TotalCost
}

func (v *GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AmazonActivityMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata struct {
	Typename string `json:"__typename"`

	ProductName string `json:"productName"`

	Subject []AmazonActivityMetadataSubjectIdentifier `json:"subject"`

	Date graphqlTypes.Date `json:"date"`

	QuantityPurchased int `json:"quantityPurchased"`

	TotalCost string `json:"totalCost"`
}

func (v *GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata) __premarshalJSON() (*__premarshalGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata, error) {
	var retval __premarshalGetActivityActivityResponseDataActivityMetadataAmazonActivityMetadata

	retval.Typename = v.Typename
	retval.ProductName = v.AmazonActivityMetadata.ProductName
	retval.Subject = v.AmazonActivityMetadata.Subject
	retval.Date = v.AmazonActivityMetadata.Date
	retval.QuantityPurchased = v.AmazonActivityMetadata.QuantityPurchased
	retval.TotalCost = v.AmazonActivityMetadata.TotalCost
	return &retval, nil
}

// GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata includes the requested fields of the GraphQL type InstacartActivityMetadata.
type GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata struct {
	Typename                  string `json:"__typename"`
	InstacartActivityMetadata `json:"-"`
}

// GetTypename returns GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) GetTypename() string {
	return v.Typename
}

// GetSubject returns GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) GetSubject() []InstacartActivityMetadataSubjectIdentifier {
	return v.InstacartActivityMetadata.Subject
}

// GetRetailer returns GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata.Retailer, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) GetRetailer() string {
	return v.InstacartActivityMetadata.Retailer
}

// GetTotalOrderAmountSpent returns GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata.TotalOrderAmountSpent, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) GetTotalOrderAmountSpent() string {
	return v.InstacartActivityMetadata.TotalOrderAmountSpent
}

// GetDateOrdered returns GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata.DateOrdered, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) GetDateOrdered() graphqlTypes.Date {
	return v.InstacartActivityMetadata.DateOrdered
}

// GetDateDelivered returns GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata.DateDelivered, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) GetDateDelivered() graphqlTypes.Date {
	return v.InstacartActivityMetadata.DateDelivered
}

// GetStatusString returns GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata.StatusString, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) GetStatusString() string {
	return v.InstacartActivityMetadata.StatusString
}

// GetItems returns GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata.Items, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) GetItems() []InstacartActivityMetadataItemsInstacartOrderItem {
	return v.InstacartActivityMetadata.Items
}

func (v *GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InstacartActivityMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata struct {
	Typename string `json:"__typename"`

	Subject []InstacartActivityMetadataSubjectIdentifier `json:"subject"`

	Retailer string `json:"retailer"`

	TotalOrderAmountSpent string `json:"totalOrderAmountSpent"`

	DateOrdered graphqlTypes.Date `json:"dateOrdered"`

	DateDelivered graphqlTypes.Date `json:"dateDelivered"`

	StatusString string `json:"statusString"`

	Items []InstacartActivityMetadataItemsInstacartOrderItem `json:"items"`
}

func (v *GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata) __premarshalJSON() (*__premarshalGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata, error) {
	var retval __premarshalGetActivityActivityResponseDataActivityMetadataInstacartActivityMetadata

	retval.Typename = v.Typename
	retval.Subject = v.InstacartActivityMetadata.Subject
	retval.Retailer = v.InstacartActivityMetadata.Retailer
	retval.TotalOrderAmountSpent = v.InstacartActivityMetadata.TotalOrderAmountSpent
	retval.DateOrdered = v.InstacartActivityMetadata.DateOrdered
	retval.DateDelivered = v.InstacartActivityMetadata.DateDelivered
	retval.StatusString = v.InstacartActivityMetadata.StatusString
	retval.Items = v.InstacartActivityMetadata.Items
	return &retval, nil
}

// GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata includes the requested fields of the GraphQL type NetflixActivityMetadata.
type GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata struct {
	Typename                string `json:"__typename"`
	NetflixActivityMetadata `json:"-"`
}

// GetTypename returns GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata) GetTypename() string {
	return v.Typename
}

// GetTitle returns GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata.Title, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata) GetTitle() string {
	return v.NetflixActivityMetadata.Title
}

// GetSubject returns GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata) GetSubject() []NetflixActivityMetadataSubjectIdentifier {
	return v.NetflixActivityMetadata.Subject
}

// GetDate returns GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata.Date, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata) GetDate() graphqlTypes.Date {
	return v.NetflixActivityMetadata.Date
}

// GetLastPlayedAt returns GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata.LastPlayedAt, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata) GetLastPlayedAt() graphqlTypes.Date {
	return v.NetflixActivityMetadata.LastPlayedAt
}

func (v *GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NetflixActivityMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata struct {
	Typename string `json:"__typename"`

	Title string `json:"title"`

	Subject []NetflixActivityMetadataSubjectIdentifier `json:"subject"`

	Date graphqlTypes.Date `json:"date"`

	LastPlayedAt graphqlTypes.Date `json:"lastPlayedAt"`
}

func (v *GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata) __premarshalJSON() (*__premarshalGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata, error) {
	var retval __premarshalGetActivityActivityResponseDataActivityMetadataNetflixActivityMetadata

	retval.Typename = v.Typename
	retval.Title = v.NetflixActivityMetadata.Title
	retval.Subject = v.NetflixActivityMetadata.Subject
	retval.Date = v.NetflixActivityMetadata.Date
	retval.LastPlayedAt = v.NetflixActivityMetadata.LastPlayedAt
	return &retval, nil
}

// GetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata includes the requested fields of the GraphQL type PlaystationActivityMetadata.
type GetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata struct {
	Typename                    string `json:"__typename"`
	PlaystationActivityMetadata `json:"-"`
}

// GetTypename returns GetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata) GetTypename() string {
	return v.Typename
}

// GetTitle returns GetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata.Title, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata) GetTitle() string {
	return v.PlaystationActivityMetadata.Title
}

// GetSubject returns GetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata) GetSubject() []PlaystationActivityMetadataSubjectIdentifier {
	return v.PlaystationActivityMetadata.Subject
}

// GetLastPlayedAt returns GetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata.LastPlayedAt, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata) GetLastPlayedAt() graphqlTypes.Date {
	return v.PlaystationActivityMetadata.LastPlayedAt
}

func (v *GetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.GetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PlaystationActivityMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata struct {
	Typename string `json:"__typename"`

	Title string `json:"title"`

	Subject []PlaystationActivityMetadataSubjectIdentifier `json:"subject"`

	LastPlayedAt graphqlTypes.Date `json:"lastPlayedAt"`
}

func (v *GetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata) __premarshalJSON() (*__premarshalGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata, error) {
	var retval __premarshalGetActivityActivityResponseDataActivityMetadataPlaystationActivityMetadata

	retval.Typename = v.Typename
	retval.Title = v.PlaystationActivityMetadata.Title
	retval.Subject = v.PlaystationActivityMetadata.Subject
	retval.LastPlayedAt = v.PlaystationActivityMetadata.LastPlayedAt
	return &retval, nil
}

// GetActivityActivityResponseDataActivityMetadataUberActivityMetadata includes the requested fields of the GraphQL type UberActivityMetadata.
type GetActivityActivityResponseDataActivityMetadataUberActivityMetadata struct {
	Typename             string `json:"__typename"`
	UberActivityMetadata `json:"-"`
}

// GetTypename returns GetActivityActivityResponseDataActivityMetadataUberActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataUberActivityMetadata) GetTypename() string {
	return v.Typename
}

// GetSubject returns GetActivityActivityResponseDataActivityMetadataUberActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataUberActivityMetadata) GetSubject() []UberActivityMetadataSubjectIdentifier {
	return v.UberActivityMetadata.Subject
}

// GetBeginTripTime returns GetActivityActivityResponseDataActivityMetadataUberActivityMetadata.BeginTripTime, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataUberActivityMetadata) GetBeginTripTime() time.Time {
	return v.UberActivityMetadata.BeginTripTime
}

// GetDropoffTime returns GetActivityActivityResponseDataActivityMetadataUberActivityMetadata.DropoffTime, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataUberActivityMetadata) GetDropoffTime() time.Time {
	return v.UberActivityMetadata.DropoffTime
}

// GetCost returns GetActivityActivityResponseDataActivityMetadataUberActivityMetadata.Cost, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataUberActivityMetadata) GetCost() string {
	return v.UberActivityMetadata.Cost
}

// GetCity returns GetActivityActivityResponseDataActivityMetadataUberActivityMetadata.City, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataUberActivityMetadata) GetCity() string {
	return v.UberActivityMetadata.City
}

// GetDistance returns GetActivityActivityResponseDataActivityMetadataUberActivityMetadata.Distance, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataUberActivityMetadata) GetDistance() string {
	return v.UberActivityMetadata.Distance
}

// GetStatus returns GetActivityActivityResponseDataActivityMetadataUberActivityMetadata.Status, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataUberActivityMetadata) GetStatus() TripStatus {
	return v.UberActivityMetadata.Status
}

func (v *GetActivityActivityResponseDataActivityMetadataUberActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetActivityActivityResponseDataActivityMetadataUberActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.GetActivityActivityResponseDataActivityMetadataUberActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UberActivityMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetActivityActivityResponseDataActivityMetadataUberActivityMetadata struct {
	Typename string `json:"__typename"`

	Subject []UberActivityMetadataSubjectIdentifier `json:"subject"`

	BeginTripTime time.Time `json:"beginTripTime"`

	DropoffTime time.Time `json:"dropoffTime"`

	Cost string `json:"cost"`

	City string `json:"city"`

	Distance string `json:"distance"`

	Status TripStatus `json:"status"`
}

func (v *GetActivityActivityResponseDataActivityMetadataUberActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetActivityActivityResponseDataActivityMetadataUberActivityMetadata) __premarshalJSON() (*__premarshalGetActivityActivityResponseDataActivityMetadataUberActivityMetadata, error) {
	var retval __premarshalGetActivityActivityResponseDataActivityMetadataUberActivityMetadata

	retval.Typename = v.Typename
	retval.Subject = v.UberActivityMetadata.Subject
	retval.BeginTripTime = v.UberActivityMetadata.BeginTripTime
	retval.DropoffTime = v.UberActivityMetadata.DropoffTime
	retval.Cost = v.UberActivityMetadata.Cost
	retval.City = v.UberActivityMetadata.City
	retval.Distance = v.UberActivityMetadata.Distance
	retval.Status = v.UberActivityMetadata.Status
	return &retval, nil
}

// GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata includes the requested fields of the GraphQL type YoutubeActivityMetadata.
type GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata struct {
	Typename                string `json:"__typename"`
	YoutubeActivityMetadata `json:"-"`
}

// GetTypename returns GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata) GetTypename() string {
	return v.Typename
}

// GetTitle returns GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata.Title, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata) GetTitle() string {
	return v.YoutubeActivityMetadata.Title
}

// GetSubject returns GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata) GetSubject() []YoutubeActivityMetadataSubjectIdentifier {
	return v.YoutubeActivityMetadata.Subject
}

// GetDate returns GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata.Date, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata) GetDate() graphqlTypes.Date {
	return v.YoutubeActivityMetadata.Date
}

// GetPercentageWatched returns GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata.PercentageWatched, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata) GetPercentageWatched() int {
	return v.YoutubeActivityMetadata.PercentageWatched
}

// GetContentType returns GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata.ContentType, and is useful for accessing the field via an interface.
func (v *GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata) GetContentType() ContentType {
	return v.YoutubeActivityMetadata.ContentType
}

func (v *GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.YoutubeActivityMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata struct {
	Typename string `json:"__typename"`

	Title string `json:"title"`

	Subject []YoutubeActivityMetadataSubjectIdentifier `json:"subject"`

	Date graphqlTypes.Date `json:"date"`

	PercentageWatched int `json:"percentageWatched"`

	ContentType ContentType `json:"contentType"`
}

func (v *GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata) __premarshalJSON() (*__premarshalGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata, error) {
	var retval __premarshalGetActivityActivityResponseDataActivityMetadataYoutubeActivityMetadata

	retval.Typename = v.Typename
	retval.Title = v.YoutubeActivityMetadata.Title
	retval.Subject = v.YoutubeActivityMetadata.Subject
	retval.Date = v.YoutubeActivityMetadata.Date
	retval.PercentageWatched = v.YoutubeActivityMetadata.PercentageWatched
	retval.ContentType = v.YoutubeActivityMetadata.ContentType
	return &retval, nil
}

// GetAppByPublicKeyApplication includes the requested fields of the GraphQL type Application.
type GetAppByPublicKeyApplication struct {
	AppName      string             `json:"appName"`
	PublicKey    string             `json:"publicKey"`
	IconURL      string             `json:"iconURL"`
	GandalfID    graphqlTypes.Int64 `json:"gandalfID"`
	AppRegistrar string             `json:"appRegistrar"`
}

// GetAppName returns GetAppByPublicKeyApplication.AppName, and is useful for accessing the field via an interface.
func (v *GetAppByPublicKeyApplication) GetAppName() string { return v.AppName }

// GetPublicKey returns GetAppByPublicKeyApplication.PublicKey, and is useful for accessing the field via an interface.
func (v *GetAppByPublicKeyApplication) GetPublicKey() string { return v.PublicKey }

// GetIconURL returns GetAppByPublicKeyApplication.IconURL, and is useful for accessing the field via an interface.
func (v *GetAppByPublicKeyApplication) GetIconURL() string { return v.IconURL }

// GetGandalfID returns GetAppByPublicKeyApplication.GandalfID, and is useful for accessing the field via an interface.
func (v *GetAppByPublicKeyApplication) GetGandalfID() graphqlTypes.Int64 { return v.GandalfID }

// GetAppRegistrar returns GetAppByPublicKeyApplication.AppRegistrar, and is useful for accessing the field via an interface.
func (v *GetAppByPublicKeyApplication) GetAppRegistrar() string { return v.AppRegistrar }

// GetTraitsTrait includes the requested fields of the GraphQL type Trait.
type GetTraitsTrait struct {
	Id        graphqlTypes.UUID `json:"id"`
	Source    Source            `json:"source"`
	Label     TraitLabel        `json:"label"`
	Value     string            `json:"value"`
	Timestamp time.Time         `json:"timestamp"`
}

// GetId returns GetTraitsTrait.Id, and is useful for accessing the field via an interface.
func (v *GetTraitsTrait) GetId() graphqlTypes.UUID { return v.Id }

// GetSource returns GetTraitsTrait.Source, and is useful for accessing the field via an interface.
func (v *GetTraitsTrait) GetSource() Source { return v.Source }

// GetLabel returns GetTraitsTrait.Label, and is useful for accessing the field via an interface.
func (v *GetTraitsTrait) GetLabel() TraitLabel { return v.Label }

// GetValue returns GetTraitsTrait.Value, and is useful for accessing the field via an interface.
func (v *GetTraitsTrait) GetValue() string { return v.Value }

// GetTimestamp returns GetTraitsTrait.Timestamp, and is useful for accessing the field via an interface.
func (v *GetTraitsTrait) GetTimestamp() time.Time { return v.Timestamp }

type IdentifierType string

const (
	IdentifierTypeImdb        IdentifierType = "IMDB"
	IdentifierTypeMoby        IdentifierType = "MOBY"
	IdentifierTypeRawg        IdentifierType = "RAWG"
	IdentifierTypeIgdb        IdentifierType = "IGDB"
	IdentifierTypeAsin        IdentifierType = "ASIN"
	IdentifierTypePlaystation IdentifierType = "PLAYSTATION"
	IdentifierTypeYoutube     IdentifierType = "YOUTUBE"
	IdentifierTypeTvdb        IdentifierType = "TVDB"
	IdentifierTypeTvmaze      IdentifierType = "TVMAZE"
	IdentifierTypeUber        IdentifierType = "UBER"
	IdentifierTypeInstacart   IdentifierType = "INSTACART"
)

// InstacartActivityMetadata includes the GraphQL fields of InstacartActivityMetadata requested by the fragment InstacartActivityMetadata.
type InstacartActivityMetadata struct {
	Subject               []InstacartActivityMetadataSubjectIdentifier       `json:"subject"`
	Retailer              string                                             `json:"retailer"`
	TotalOrderAmountSpent string                                             `json:"totalOrderAmountSpent"`
	DateOrdered           graphqlTypes.Date                                  `json:"dateOrdered"`
	DateDelivered         graphqlTypes.Date                                  `json:"dateDelivered"`
	StatusString          string                                             `json:"statusString"`
	Items                 []InstacartActivityMetadataItemsInstacartOrderItem `json:"items"`
}

// GetSubject returns InstacartActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadata) GetSubject() []InstacartActivityMetadataSubjectIdentifier {
	return v.Subject
}

// GetRetailer returns InstacartActivityMetadata.Retailer, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadata) GetRetailer() string { return v.Retailer }

// GetTotalOrderAmountSpent returns InstacartActivityMetadata.TotalOrderAmountSpent, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadata) GetTotalOrderAmountSpent() string { return v.TotalOrderAmountSpent }

// GetDateOrdered returns InstacartActivityMetadata.DateOrdered, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadata) GetDateOrdered() graphqlTypes.Date { return v.DateOrdered }

// GetDateDelivered returns InstacartActivityMetadata.DateDelivered, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadata) GetDateDelivered() graphqlTypes.Date { return v.DateDelivered }

// GetStatusString returns InstacartActivityMetadata.StatusString, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadata) GetStatusString() string { return v.StatusString }

// GetItems returns InstacartActivityMetadata.Items, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadata) GetItems() []InstacartActivityMetadataItemsInstacartOrderItem {
	return v.Items
}

// InstacartActivityMetadataItemsInstacartOrderItem includes the requested fields of the GraphQL type InstacartOrderItem.
type InstacartActivityMetadataItemsInstacartOrderItem struct {
	ItemID            string              `json:"itemID"`
	ProductName       string              `json:"productName"`
	UnitPrice         string              `json:"unitPrice"`
	Status            InstacartItemStatus `json:"status"`
	QuantityPurchased graphqlTypes.Int64  `json:"quantityPurchased"`
}

// GetItemID returns InstacartActivityMetadataItemsInstacartOrderItem.ItemID, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataItemsInstacartOrderItem) GetItemID() string { return v.ItemID }

// GetProductName returns InstacartActivityMetadataItemsInstacartOrderItem.ProductName, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataItemsInstacartOrderItem) GetProductName() string {
	return v.ProductName
}

// GetUnitPrice returns InstacartActivityMetadataItemsInstacartOrderItem.UnitPrice, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataItemsInstacartOrderItem) GetUnitPrice() string { return v.UnitPrice }

// GetStatus returns InstacartActivityMetadataItemsInstacartOrderItem.Status, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataItemsInstacartOrderItem) GetStatus() InstacartItemStatus {
	return v.Status
}

// GetQuantityPurchased returns InstacartActivityMetadataItemsInstacartOrderItem.QuantityPurchased, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataItemsInstacartOrderItem) GetQuantityPurchased() graphqlTypes.Int64 {
	return v.QuantityPurchased
}

// InstacartActivityMetadataSubjectIdentifier includes the requested fields of the GraphQL type Identifier.
type InstacartActivityMetadataSubjectIdentifier struct {
	Value          string         `json:"value"`
	IdentifierType IdentifierType `json:"identifierType"`
}

// GetValue returns InstacartActivityMetadataSubjectIdentifier.Value, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataSubjectIdentifier) GetValue() string { return v.Value }

// GetIdentifierType returns InstacartActivityMetadataSubjectIdentifier.IdentifierType, and is useful for accessing the field via an interface.
func (v *InstacartActivityMetadataSubjectIdentifier) GetIdentifierType() IdentifierType {
	return v.IdentifierType
}

type InstacartItemStatus string

const (
	InstacartItemStatusFound    InstacartItemStatus = "FOUND"
	InstacartItemStatusReplaced InstacartItemStatus = "REPLACED"
	InstacartItemStatusTorefund InstacartItemStatus = "TOREFUND"
)

// LookupActivity includes the requested fields of the GraphQL type Activity.
type LookupActivity struct {
	Id       string                 `json:"id"`
	Metadata LookupActivityMetadata `json:"-"`
}

// GetId returns LookupActivity.Id, and is useful for accessing the field via an interface.
func (v *LookupActivity) GetId() string { return v.Id }

// GetMetadata returns LookupActivity.Metadata, and is useful for accessing the field via an interface.
func (v *LookupActivity) GetMetadata() LookupActivityMetadata { return v.Metadata }

func (v *LookupActivity) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*LookupActivity
		Metadata json.RawMessage `json:"metadata"`
		graphql.NoUnmarshalJSON
	}
	firstPass.LookupActivity = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Metadata
		src := firstPass.Metadata
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalLookupActivityMetadata(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal LookupActivity.Metadata: %w", err)
			}
		}
	}
	return nil
}

type __premarshalLookupActivity struct {
	Id string `json:"id"`

	Metadata json.RawMessage `json:"metadata"`
}

func (v *LookupActivity) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *LookupActivity) __premarshalJSON() (*__premarshalLookupActivity, error) {
	var retval __premarshalLookupActivity

	retval.Id = v.Id
	{

		dst := &retval.Metadata
		src := v.Metadata
		var err error
		*dst, err = __marshalLookupActivityMetadata(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal LookupActivity.Metadata: %w", err)
		}
	}
	return &retval, nil
}

// LookupActivityMetadata includes the requested fields of the GraphQL interface ActivityMetadata.
//
// LookupActivityMetadata is implemented by the following types:
// LookupActivityMetadataAmazonActivityMetadata
// LookupActivityMetadataInstacartActivityMetadata
// LookupActivityMetadataNetflixActivityMetadata
// LookupActivityMetadataPlaystationActivityMetadata
// LookupActivityMetadataUberActivityMetadata
// LookupActivityMetadataYoutubeActivityMetadata
type LookupActivityMetadata interface {
	implementsGraphQLInterfaceLookupActivityMetadata()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *LookupActivityMetadataAmazonActivityMetadata) implementsGraphQLInterfaceLookupActivityMetadata() {
}
func (v *LookupActivityMetadataInstacartActivityMetadata) implementsGraphQLInterfaceLookupActivityMetadata() {
}
func (v *LookupActivityMetadataNetflixActivityMetadata) implementsGraphQLInterfaceLookupActivityMetadata() {
}
func (v *LookupActivityMetadataPlaystationActivityMetadata) implementsGraphQLInterfaceLookupActivityMetadata() {
}
func (v *LookupActivityMetadataUberActivityMetadata) implementsGraphQLInterfaceLookupActivityMetadata() {
}
func (v *LookupActivityMetadataYoutubeActivityMetadata) implementsGraphQLInterfaceLookupActivityMetadata() {
}

func __unmarshalLookupActivityMetadata(b []byte, v *LookupActivityMetadata) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AmazonActivityMetadata":
		*v = new(LookupActivityMetadataAmazonActivityMetadata)
		return json.Unmarshal(b, *v)
	case "InstacartActivityMetadata":
		*v = new(LookupActivityMetadataInstacartActivityMetadata)
		return json.Unmarshal(b, *v)
	case "NetflixActivityMetadata":
		*v = new(LookupActivityMetadataNetflixActivityMetadata)
		return json.Unmarshal(b, *v)
	case "PlaystationActivityMetadata":
		*v = new(LookupActivityMetadataPlaystationActivityMetadata)
		return json.Unmarshal(b, *v)
	case "UberActivityMetadata":
		*v = new(LookupActivityMetadataUberActivityMetadata)
		return json.Unmarshal(b, *v)
	case "YoutubeActivityMetadata":
		*v = new(LookupActivityMetadataYoutubeActivityMetadata)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ActivityMetadata.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for LookupActivityMetadata: "%v"`, tn.TypeName)
	}
}

func __marshalLookupActivityMetadata(v *LookupActivityMetadata) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *LookupActivityMetadataAmazonActivityMetadata:
		typename = "AmazonActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalLookupActivityMetadataAmazonActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *LookupActivityMetadataInstacartActivityMetadata:
		typename = "InstacartActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalLookupActivityMetadataInstacartActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *LookupActivityMetadataNetflixActivityMetadata:
		typename = "NetflixActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalLookupActivityMetadataNetflixActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *LookupActivityMetadataPlaystationActivityMetadata:
		typename = "PlaystationActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalLookupActivityMetadataPlaystationActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *LookupActivityMetadataUberActivityMetadata:
		typename = "UberActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalLookupActivityMetadataUberActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *LookupActivityMetadataYoutubeActivityMetadata:
		typename = "YoutubeActivityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalLookupActivityMetadataYoutubeActivityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for LookupActivityMetadata: "%T"`, v)
	}
}

// LookupActivityMetadataAmazonActivityMetadata includes the requested fields of the GraphQL type AmazonActivityMetadata.
type LookupActivityMetadataAmazonActivityMetadata struct {
	Typename               string `json:"__typename"`
	AmazonActivityMetadata `json:"-"`
}

// GetTypename returns LookupActivityMetadataAmazonActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataAmazonActivityMetadata) GetTypename() string { return v.Typename }

// GetProductName returns LookupActivityMetadataAmazonActivityMetadata.ProductName, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataAmazonActivityMetadata) GetProductName() string {
	return v.AmazonActivityMetadata.ProductName
}

// GetSubject returns LookupActivityMetadataAmazonActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataAmazonActivityMetadata) GetSubject() []AmazonActivityMetadataSubjectIdentifier {
	return v.AmazonActivityMetadata.Subject
}

// GetDate returns LookupActivityMetadataAmazonActivityMetadata.Date, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataAmazonActivityMetadata) GetDate() graphqlTypes.Date {
	return v.AmazonActivityMetadata.Date
}

// GetQuantityPurchased returns LookupActivityMetadataAmazonActivityMetadata.QuantityPurchased, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataAmazonActivityMetadata) GetQuantityPurchased() int {
	return v.AmazonActivityMetadata.QuantityPurchased
}

// GetTotalCost returns LookupActivityMetadataAmazonActivityMetadata.TotalCost, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataAmazonActivityMetadata) GetTotalCost() string {
	return v.AmazonActivityMetadata.TotalCost
}

func (v *LookupActivityMetadataAmazonActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*LookupActivityMetadataAmazonActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.LookupActivityMetadataAmazonActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AmazonActivityMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalLookupActivityMetadataAmazonActivityMetadata struct {
	Typename string `json:"__typename"`

	ProductName string `json:"productName"`

	Subject []AmazonActivityMetadataSubjectIdentifier `json:"subject"`

	Date graphqlTypes.Date `json:"date"`

	QuantityPurchased int `json:"quantityPurchased"`

	TotalCost string `json:"totalCost"`
}

func (v *LookupActivityMetadataAmazonActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *LookupActivityMetadataAmazonActivityMetadata) __premarshalJSON() (*__premarshalLookupActivityMetadataAmazonActivityMetadata, error) {
	var retval __premarshalLookupActivityMetadataAmazonActivityMetadata

	retval.Typename = v.Typename
	retval.ProductName = v.AmazonActivityMetadata.ProductName
	retval.Subject = v.AmazonActivityMetadata.Subject
	retval.Date = v.AmazonActivityMetadata.Date
	retval.QuantityPurchased = v.AmazonActivityMetadata.QuantityPurchased
	retval.TotalCost = v.AmazonActivityMetadata.TotalCost
	return &retval, nil
}

// LookupActivityMetadataInstacartActivityMetadata includes the requested fields of the GraphQL type InstacartActivityMetadata.
type LookupActivityMetadataInstacartActivityMetadata struct {
	Typename                  string `json:"__typename"`
	InstacartActivityMetadata `json:"-"`
}

// GetTypename returns LookupActivityMetadataInstacartActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataInstacartActivityMetadata) GetTypename() string { return v.Typename }

// GetSubject returns LookupActivityMetadataInstacartActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataInstacartActivityMetadata) GetSubject() []InstacartActivityMetadataSubjectIdentifier {
	return v.InstacartActivityMetadata.Subject
}

// GetRetailer returns LookupActivityMetadataInstacartActivityMetadata.Retailer, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataInstacartActivityMetadata) GetRetailer() string {
	return v.InstacartActivityMetadata.Retailer
}

// GetTotalOrderAmountSpent returns LookupActivityMetadataInstacartActivityMetadata.TotalOrderAmountSpent, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataInstacartActivityMetadata) GetTotalOrderAmountSpent() string {
	return v.InstacartActivityMetadata.TotalOrderAmountSpent
}

// GetDateOrdered returns LookupActivityMetadataInstacartActivityMetadata.DateOrdered, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataInstacartActivityMetadata) GetDateOrdered() graphqlTypes.Date {
	return v.InstacartActivityMetadata.DateOrdered
}

// GetDateDelivered returns LookupActivityMetadataInstacartActivityMetadata.DateDelivered, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataInstacartActivityMetadata) GetDateDelivered() graphqlTypes.Date {
	return v.InstacartActivityMetadata.DateDelivered
}

// GetStatusString returns LookupActivityMetadataInstacartActivityMetadata.StatusString, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataInstacartActivityMetadata) GetStatusString() string {
	return v.InstacartActivityMetadata.StatusString
}

// GetItems returns LookupActivityMetadataInstacartActivityMetadata.Items, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataInstacartActivityMetadata) GetItems() []InstacartActivityMetadataItemsInstacartOrderItem {
	return v.InstacartActivityMetadata.Items
}

func (v *LookupActivityMetadataInstacartActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*LookupActivityMetadataInstacartActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.LookupActivityMetadataInstacartActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InstacartActivityMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalLookupActivityMetadataInstacartActivityMetadata struct {
	Typename string `json:"__typename"`

	Subject []InstacartActivityMetadataSubjectIdentifier `json:"subject"`

	Retailer string `json:"retailer"`

	TotalOrderAmountSpent string `json:"totalOrderAmountSpent"`

	DateOrdered graphqlTypes.Date `json:"dateOrdered"`

	DateDelivered graphqlTypes.Date `json:"dateDelivered"`

	StatusString string `json:"statusString"`

	Items []InstacartActivityMetadataItemsInstacartOrderItem `json:"items"`
}

func (v *LookupActivityMetadataInstacartActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *LookupActivityMetadataInstacartActivityMetadata) __premarshalJSON() (*__premarshalLookupActivityMetadataInstacartActivityMetadata, error) {
	var retval __premarshalLookupActivityMetadataInstacartActivityMetadata

	retval.Typename = v.Typename
	retval.Subject = v.InstacartActivityMetadata.Subject
	retval.Retailer = v.InstacartActivityMetadata.Retailer
	retval.TotalOrderAmountSpent = v.InstacartActivityMetadata.TotalOrderAmountSpent
	retval.DateOrdered = v.InstacartActivityMetadata.DateOrdered
	retval.DateDelivered = v.InstacartActivityMetadata.DateDelivered
	retval.StatusString = v.InstacartActivityMetadata.StatusString
	retval.Items = v.InstacartActivityMetadata.Items
	return &retval, nil
}

// LookupActivityMetadataNetflixActivityMetadata includes the requested fields of the GraphQL type NetflixActivityMetadata.
type LookupActivityMetadataNetflixActivityMetadata struct {
	Typename                string `json:"__typename"`
	NetflixActivityMetadata `json:"-"`
}

// GetTypename returns LookupActivityMetadataNetflixActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataNetflixActivityMetadata) GetTypename() string { return v.Typename }

// GetTitle returns LookupActivityMetadataNetflixActivityMetadata.Title, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataNetflixActivityMetadata) GetTitle() string {
	return v.NetflixActivityMetadata.Title
}

// GetSubject returns LookupActivityMetadataNetflixActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataNetflixActivityMetadata) GetSubject() []NetflixActivityMetadataSubjectIdentifier {
	return v.NetflixActivityMetadata.Subject
}

// GetDate returns LookupActivityMetadataNetflixActivityMetadata.Date, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataNetflixActivityMetadata) GetDate() graphqlTypes.Date {
	return v.NetflixActivityMetadata.Date
}

// GetLastPlayedAt returns LookupActivityMetadataNetflixActivityMetadata.LastPlayedAt, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataNetflixActivityMetadata) GetLastPlayedAt() graphqlTypes.Date {
	return v.NetflixActivityMetadata.LastPlayedAt
}

func (v *LookupActivityMetadataNetflixActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*LookupActivityMetadataNetflixActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.LookupActivityMetadataNetflixActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NetflixActivityMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalLookupActivityMetadataNetflixActivityMetadata struct {
	Typename string `json:"__typename"`

	Title string `json:"title"`

	Subject []NetflixActivityMetadataSubjectIdentifier `json:"subject"`

	Date graphqlTypes.Date `json:"date"`

	LastPlayedAt graphqlTypes.Date `json:"lastPlayedAt"`
}

func (v *LookupActivityMetadataNetflixActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *LookupActivityMetadataNetflixActivityMetadata) __premarshalJSON() (*__premarshalLookupActivityMetadataNetflixActivityMetadata, error) {
	var retval __premarshalLookupActivityMetadataNetflixActivityMetadata

	retval.Typename = v.Typename
	retval.Title = v.NetflixActivityMetadata.Title
	retval.Subject = v.NetflixActivityMetadata.Subject
	retval.Date = v.NetflixActivityMetadata.Date
	retval.LastPlayedAt = v.NetflixActivityMetadata.LastPlayedAt
	return &retval, nil
}

// LookupActivityMetadataPlaystationActivityMetadata includes the requested fields of the GraphQL type PlaystationActivityMetadata.
type LookupActivityMetadataPlaystationActivityMetadata struct {
	Typename                    string `json:"__typename"`
	PlaystationActivityMetadata `json:"-"`
}

// GetTypename returns LookupActivityMetadataPlaystationActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataPlaystationActivityMetadata) GetTypename() string { return v.Typename }

// GetTitle returns LookupActivityMetadataPlaystationActivityMetadata.Title, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataPlaystationActivityMetadata) GetTitle() string {
	return v.PlaystationActivityMetadata.Title
}

// GetSubject returns LookupActivityMetadataPlaystationActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataPlaystationActivityMetadata) GetSubject() []PlaystationActivityMetadataSubjectIdentifier {
	return v.PlaystationActivityMetadata.Subject
}

// GetLastPlayedAt returns LookupActivityMetadataPlaystationActivityMetadata.LastPlayedAt, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataPlaystationActivityMetadata) GetLastPlayedAt() graphqlTypes.Date {
	return v.PlaystationActivityMetadata.LastPlayedAt
}

func (v *LookupActivityMetadataPlaystationActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*LookupActivityMetadataPlaystationActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.LookupActivityMetadataPlaystationActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PlaystationActivityMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalLookupActivityMetadataPlaystationActivityMetadata struct {
	Typename string `json:"__typename"`

	Title string `json:"title"`

	Subject []PlaystationActivityMetadataSubjectIdentifier `json:"subject"`

	LastPlayedAt graphqlTypes.Date `json:"lastPlayedAt"`
}

func (v *LookupActivityMetadataPlaystationActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *LookupActivityMetadataPlaystationActivityMetadata) __premarshalJSON() (*__premarshalLookupActivityMetadataPlaystationActivityMetadata, error) {
	var retval __premarshalLookupActivityMetadataPlaystationActivityMetadata

	retval.Typename = v.Typename
	retval.Title = v.PlaystationActivityMetadata.Title
	retval.Subject = v.PlaystationActivityMetadata.Subject
	retval.LastPlayedAt = v.PlaystationActivityMetadata.LastPlayedAt
	return &retval, nil
}

// LookupActivityMetadataUberActivityMetadata includes the requested fields of the GraphQL type UberActivityMetadata.
type LookupActivityMetadataUberActivityMetadata struct {
	Typename             string `json:"__typename"`
	UberActivityMetadata `json:"-"`
}

// GetTypename returns LookupActivityMetadataUberActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataUberActivityMetadata) GetTypename() string { return v.Typename }

// GetSubject returns LookupActivityMetadataUberActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataUberActivityMetadata) GetSubject() []UberActivityMetadataSubjectIdentifier {
	return v.UberActivityMetadata.Subject
}

// GetBeginTripTime returns LookupActivityMetadataUberActivityMetadata.BeginTripTime, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataUberActivityMetadata) GetBeginTripTime() time.Time {
	return v.UberActivityMetadata.BeginTripTime
}

// GetDropoffTime returns LookupActivityMetadataUberActivityMetadata.DropoffTime, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataUberActivityMetadata) GetDropoffTime() time.Time {
	return v.UberActivityMetadata.DropoffTime
}

// GetCost returns LookupActivityMetadataUberActivityMetadata.Cost, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataUberActivityMetadata) GetCost() string {
	return v.UberActivityMetadata.Cost
}

// GetCity returns LookupActivityMetadataUberActivityMetadata.City, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataUberActivityMetadata) GetCity() string {
	return v.UberActivityMetadata.City
}

// GetDistance returns LookupActivityMetadataUberActivityMetadata.Distance, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataUberActivityMetadata) GetDistance() string {
	return v.UberActivityMetadata.Distance
}

// GetStatus returns LookupActivityMetadataUberActivityMetadata.Status, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataUberActivityMetadata) GetStatus() TripStatus {
	return v.UberActivityMetadata.Status
}

func (v *LookupActivityMetadataUberActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*LookupActivityMetadataUberActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.LookupActivityMetadataUberActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UberActivityMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalLookupActivityMetadataUberActivityMetadata struct {
	Typename string `json:"__typename"`

	Subject []UberActivityMetadataSubjectIdentifier `json:"subject"`

	BeginTripTime time.Time `json:"beginTripTime"`

	DropoffTime time.Time `json:"dropoffTime"`

	Cost string `json:"cost"`

	City string `json:"city"`

	Distance string `json:"distance"`

	Status TripStatus `json:"status"`
}

func (v *LookupActivityMetadataUberActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *LookupActivityMetadataUberActivityMetadata) __premarshalJSON() (*__premarshalLookupActivityMetadataUberActivityMetadata, error) {
	var retval __premarshalLookupActivityMetadataUberActivityMetadata

	retval.Typename = v.Typename
	retval.Subject = v.UberActivityMetadata.Subject
	retval.BeginTripTime = v.UberActivityMetadata.BeginTripTime
	retval.DropoffTime = v.UberActivityMetadata.DropoffTime
	retval.Cost = v.UberActivityMetadata.Cost
	retval.City = v.UberActivityMetadata.City
	retval.Distance = v.UberActivityMetadata.Distance
	retval.Status = v.UberActivityMetadata.Status
	return &retval, nil
}

// LookupActivityMetadataYoutubeActivityMetadata includes the requested fields of the GraphQL type YoutubeActivityMetadata.
type LookupActivityMetadataYoutubeActivityMetadata struct {
	Typename                string `json:"__typename"`
	YoutubeActivityMetadata `json:"-"`
}

// GetTypename returns LookupActivityMetadataYoutubeActivityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataYoutubeActivityMetadata) GetTypename() string { return v.Typename }

// GetTitle returns LookupActivityMetadataYoutubeActivityMetadata.Title, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataYoutubeActivityMetadata) GetTitle() string {
	return v.YoutubeActivityMetadata.Title
}

// GetSubject returns LookupActivityMetadataYoutubeActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataYoutubeActivityMetadata) GetSubject() []YoutubeActivityMetadataSubjectIdentifier {
	return v.YoutubeActivityMetadata.Subject
}

// GetDate returns LookupActivityMetadataYoutubeActivityMetadata.Date, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataYoutubeActivityMetadata) GetDate() graphqlTypes.Date {
	return v.YoutubeActivityMetadata.Date
}

// GetPercentageWatched returns LookupActivityMetadataYoutubeActivityMetadata.PercentageWatched, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataYoutubeActivityMetadata) GetPercentageWatched() int {
	return v.YoutubeActivityMetadata.PercentageWatched
}

// GetContentType returns LookupActivityMetadataYoutubeActivityMetadata.ContentType, and is useful for accessing the field via an interface.
func (v *LookupActivityMetadataYoutubeActivityMetadata) GetContentType() ContentType {
	return v.YoutubeActivityMetadata.ContentType
}

func (v *LookupActivityMetadataYoutubeActivityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*LookupActivityMetadataYoutubeActivityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.LookupActivityMetadataYoutubeActivityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.YoutubeActivityMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalLookupActivityMetadataYoutubeActivityMetadata struct {
	Typename string `json:"__typename"`

	Title string `json:"title"`

	Subject []YoutubeActivityMetadataSubjectIdentifier `json:"subject"`

	Date graphqlTypes.Date `json:"date"`

	PercentageWatched int `json:"percentageWatched"`

	ContentType ContentType `json:"contentType"`
}

func (v *LookupActivityMetadataYoutubeActivityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *LookupActivityMetadataYoutubeActivityMetadata) __premarshalJSON() (*__premarshalLookupActivityMetadataYoutubeActivityMetadata, error) {
	var retval __premarshalLookupActivityMetadataYoutubeActivityMetadata

	retval.Typename = v.Typename
	retval.Title = v.YoutubeActivityMetadata.Title
	retval.Subject = v.YoutubeActivityMetadata.Subject
	retval.Date = v.YoutubeActivityMetadata.Date
	retval.PercentageWatched = v.YoutubeActivityMetadata.PercentageWatched
	retval.ContentType = v.YoutubeActivityMetadata.ContentType
	return &retval, nil
}

// LookupTrait includes the requested fields of the GraphQL type Trait.
type LookupTrait struct {
	Id        graphqlTypes.UUID `json:"id"`
	Source    Source            `json:"source"`
	Label     TraitLabel        `json:"label"`
	Value     string            `json:"value"`
	Timestamp time.Time         `json:"timestamp"`
}

// GetId returns LookupTrait.Id, and is useful for accessing the field via an interface.
func (v *LookupTrait) GetId() graphqlTypes.UUID { return v.Id }

// GetSource returns LookupTrait.Source, and is useful for accessing the field via an interface.
func (v *LookupTrait) GetSource() Source { return v.Source }

// GetLabel returns LookupTrait.Label, and is useful for accessing the field via an interface.
func (v *LookupTrait) GetLabel() TraitLabel { return v.Label }

// GetValue returns LookupTrait.Value, and is useful for accessing the field via an interface.
func (v *LookupTrait) GetValue() string { return v.Value }

// GetTimestamp returns LookupTrait.Timestamp, and is useful for accessing the field via an interface.
func (v *LookupTrait) GetTimestamp() time.Time { return v.Timestamp }

// NetflixActivityMetadata includes the GraphQL fields of NetflixActivityMetadata requested by the fragment NetflixActivityMetadata.
type NetflixActivityMetadata struct {
	Title        string                                     `json:"title"`
	Subject      []NetflixActivityMetadataSubjectIdentifier `json:"subject"`
	Date         graphqlTypes.Date                          `json:"date"`
	LastPlayedAt graphqlTypes.Date                          `json:"lastPlayedAt"`
}

// GetTitle returns NetflixActivityMetadata.Title, and is useful for accessing the field via an interface.
func (v *NetflixActivityMetadata) GetTitle() string { return v.Title }

// GetSubject returns NetflixActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *NetflixActivityMetadata) GetSubject() []NetflixActivityMetadataSubjectIdentifier {
	return v.Subject
}

// GetDate returns NetflixActivityMetadata.Date, and is useful for accessing the field via an interface.
func (v *NetflixActivityMetadata) GetDate() graphqlTypes.Date { return v.Date }

// GetLastPlayedAt returns NetflixActivityMetadata.LastPlayedAt, and is useful for accessing the field via an interface.
func (v *NetflixActivityMetadata) GetLastPlayedAt() graphqlTypes.Date { return v.LastPlayedAt }

// NetflixActivityMetadataSubjectIdentifier includes the requested fields of the GraphQL type Identifier.
type NetflixActivityMetadataSubjectIdentifier struct {
	Value          string         `json:"value"`
	IdentifierType IdentifierType `json:"identifierType"`
}

// GetValue returns NetflixActivityMetadataSubjectIdentifier.Value, and is useful for accessing the field via an interface.
func (v *NetflixActivityMetadataSubjectIdentifier) GetValue() string { return v.Value }

// GetIdentifierType returns NetflixActivityMetadataSubjectIdentifier.IdentifierType, and is useful for accessing the field via an interface.
func (v *NetflixActivityMetadataSubjectIdentifier) GetIdentifierType() IdentifierType {
	return v.IdentifierType
}

// PlaystationActivityMetadata includes the GraphQL fields of PlaystationActivityMetadata requested by the fragment PlaystationActivityMetadata.
type PlaystationActivityMetadata struct {
	Title        string                                         `json:"title"`
	Subject      []PlaystationActivityMetadataSubjectIdentifier `json:"subject"`
	LastPlayedAt graphqlTypes.Date                              `json:"lastPlayedAt"`
}

// GetTitle returns PlaystationActivityMetadata.Title, and is useful for accessing the field via an interface.
func (v *PlaystationActivityMetadata) GetTitle() string { return v.Title }

// GetSubject returns PlaystationActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *PlaystationActivityMetadata) GetSubject() []PlaystationActivityMetadataSubjectIdentifier {
	return v.Subject
}

// GetLastPlayedAt returns PlaystationActivityMetadata.LastPlayedAt, and is useful for accessing the field via an interface.
func (v *PlaystationActivityMetadata) GetLastPlayedAt() graphqlTypes.Date { return v.LastPlayedAt }

// PlaystationActivityMetadataSubjectIdentifier includes the requested fields of the GraphQL type Identifier.
type PlaystationActivityMetadataSubjectIdentifier struct {
	Value          string         `json:"value"`
	IdentifierType IdentifierType `json:"identifierType"`
}

// GetValue returns PlaystationActivityMetadataSubjectIdentifier.Value, and is useful for accessing the field via an interface.
func (v *PlaystationActivityMetadataSubjectIdentifier) GetValue() string { return v.Value }

// GetIdentifierType returns PlaystationActivityMetadataSubjectIdentifier.IdentifierType, and is useful for accessing the field via an interface.
func (v *PlaystationActivityMetadataSubjectIdentifier) GetIdentifierType() IdentifierType {
	return v.IdentifierType
}

type Source string

const (
	SourceNetflix     Source = "NETFLIX"
	SourcePlaystation Source = "PLAYSTATION"
	SourceYoutube     Source = "YOUTUBE"
	SourceAmazon      Source = "AMAZON"
	SourceUber        Source = "UBER"
	SourceInstacart   Source = "INSTACART"
	SourceInstagram   Source = "INSTAGRAM"
	SourceX           Source = "X"
)

type TraitLabel string

const (
	TraitLabelPrimeSubscriber  TraitLabel = "PRIME_SUBSCRIBER"
	TraitLabelRating           TraitLabel = "RATING"
	TraitLabelTripCount        TraitLabel = "TRIP_COUNT"
	TraitLabelAccountCreatedOn TraitLabel = "ACCOUNT_CREATED_ON"
	TraitLabelPlan             TraitLabel = "PLAN"
	TraitLabelGeniusLevel      TraitLabel = "GENIUS_LEVEL"
	TraitLabelFollowerCount    TraitLabel = "FOLLOWER_COUNT"
	TraitLabelFollowingCount   TraitLabel = "FOLLOWING_COUNT"
	TraitLabelUsername         TraitLabel = "USERNAME"
	TraitLabelPostCount        TraitLabel = "POST_COUNT"
)

type TripStatus string

const (
	TripStatusCanceled    TripStatus = "CANCELED"
	TripStatusCompleted   TripStatus = "COMPLETED"
	TripStatusUnfulfilled TripStatus = "UNFULFILLED"
)

// UberActivityMetadata includes the GraphQL fields of UberActivityMetadata requested by the fragment UberActivityMetadata.
type UberActivityMetadata struct {
	Subject       []UberActivityMetadataSubjectIdentifier `json:"subject"`
	BeginTripTime time.Time                               `json:"beginTripTime"`
	DropoffTime   time.Time                               `json:"dropoffTime"`
	Cost          string                                  `json:"cost"`
	City          string                                  `json:"city"`
	Distance      string                                  `json:"distance"`
	Status        TripStatus                              `json:"status"`
}

// GetSubject returns UberActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *UberActivityMetadata) GetSubject() []UberActivityMetadataSubjectIdentifier { return v.Subject }

// GetBeginTripTime returns UberActivityMetadata.BeginTripTime, and is useful for accessing the field via an interface.
func (v *UberActivityMetadata) GetBeginTripTime() time.Time { return v.BeginTripTime }

// GetDropoffTime returns UberActivityMetadata.DropoffTime, and is useful for accessing the field via an interface.
func (v *UberActivityMetadata) GetDropoffTime() time.Time { return v.DropoffTime }

// GetCost returns UberActivityMetadata.Cost, and is useful for accessing the field via an interface.
func (v *UberActivityMetadata) GetCost() string { return v.Cost }

// GetCity returns UberActivityMetadata.City, and is useful for accessing the field via an interface.
func (v *UberActivityMetadata) GetCity() string { return v.City }

// GetDistance returns UberActivityMetadata.Distance, and is useful for accessing the field via an interface.
func (v *UberActivityMetadata) GetDistance() string { return v.Distance }

// GetStatus returns UberActivityMetadata.Status, and is useful for accessing the field via an interface.
func (v *UberActivityMetadata) GetStatus() TripStatus { return v.Status }

// UberActivityMetadataSubjectIdentifier includes the requested fields of the GraphQL type Identifier.
type UberActivityMetadataSubjectIdentifier struct {
	Value          string         `json:"value"`
	IdentifierType IdentifierType `json:"identifierType"`
}

// GetValue returns UberActivityMetadataSubjectIdentifier.Value, and is useful for accessing the field via an interface.
func (v *UberActivityMetadataSubjectIdentifier) GetValue() string { return v.Value }

// GetIdentifierType returns UberActivityMetadataSubjectIdentifier.IdentifierType, and is useful for accessing the field via an interface.
func (v *UberActivityMetadataSubjectIdentifier) GetIdentifierType() IdentifierType {
	return v.IdentifierType
}

// YoutubeActivityMetadata includes the GraphQL fields of YoutubeActivityMetadata requested by the fragment YoutubeActivityMetadata.
type YoutubeActivityMetadata struct {
	Title             string                                     `json:"title"`
	Subject           []YoutubeActivityMetadataSubjectIdentifier `json:"subject"`
	Date              graphqlTypes.Date                          `json:"date"`
	PercentageWatched int                                        `json:"percentageWatched"`
	ContentType       ContentType                                `json:"contentType"`
}

// GetTitle returns YoutubeActivityMetadata.Title, and is useful for accessing the field via an interface.
func (v *YoutubeActivityMetadata) GetTitle() string { return v.Title }

// GetSubject returns YoutubeActivityMetadata.Subject, and is useful for accessing the field via an interface.
func (v *YoutubeActivityMetadata) GetSubject() []YoutubeActivityMetadataSubjectIdentifier {
	return v.Subject
}

// GetDate returns YoutubeActivityMetadata.Date, and is useful for accessing the field via an interface.
func (v *YoutubeActivityMetadata) GetDate() graphqlTypes.Date { return v.Date }

// GetPercentageWatched returns YoutubeActivityMetadata.PercentageWatched, and is useful for accessing the field via an interface.
func (v *YoutubeActivityMetadata) GetPercentageWatched() int { return v.PercentageWatched }

// GetContentType returns YoutubeActivityMetadata.ContentType, and is useful for accessing the field via an interface.
func (v *YoutubeActivityMetadata) GetContentType() ContentType { return v.ContentType }

// YoutubeActivityMetadataSubjectIdentifier includes the requested fields of the GraphQL type Identifier.
type YoutubeActivityMetadataSubjectIdentifier struct {
	Value          string         `json:"value"`
	IdentifierType IdentifierType `json:"identifierType"`
}

// GetValue returns YoutubeActivityMetadataSubjectIdentifier.Value, and is useful for accessing the field via an interface.
func (v *YoutubeActivityMetadataSubjectIdentifier) GetValue() string { return v.Value }

// GetIdentifierType returns YoutubeActivityMetadataSubjectIdentifier.IdentifierType, and is useful for accessing the field via an interface.
func (v *YoutubeActivityMetadataSubjectIdentifier) GetIdentifierType() IdentifierType {
	return v.IdentifierType
}

// __getActivityInput is used internally by genqlient
type __getActivityInput struct {
	DataKey string             `json:"dataKey"`
	Source  Source             `json:"source"`
	Limit   graphqlTypes.Int64 `json:"limit"`
	Page    graphqlTypes.Int64 `json:"page"`
}

// GetDataKey returns __getActivityInput.DataKey, and is useful for accessing the field via an interface.
func (v *__getActivityInput) GetDataKey() string { return v.DataKey }

// GetSource returns __getActivityInput.Source, and is useful for accessing the field via an interface.
func (v *__getActivityInput) GetSource() Source { return v.Source }

// GetLimit returns __getActivityInput.Limit, and is useful for accessing the field via an interface.
func (v *__getActivityInput) GetLimit() graphqlTypes.Int64 { return v.Limit }

// GetPage returns __getActivityInput.Page, and is useful for accessing the field via an interface.
func (v *__getActivityInput) GetPage() graphqlTypes.Int64 { return v.Page }

// __getAppByPublicKeyInput is used internally by genqlient
type __getAppByPublicKeyInput struct {
	PublicKey string `json:"publicKey"`
}

// GetPublicKey returns __getAppByPublicKeyInput.PublicKey, and is useful for accessing the field via an interface.
func (v *__getAppByPublicKeyInput) GetPublicKey() string { return v.PublicKey }

// __getTraitsInput is used internally by genqlient
type __getTraitsInput struct {
	DataKey string       `json:"dataKey"`
	Source  Source       `json:"source"`
	Labels  []TraitLabel `json:"labels"`
}

// GetDataKey returns __getTraitsInput.DataKey, and is useful for accessing the field via an interface.
func (v *__getTraitsInput) GetDataKey() string { return v.DataKey }

// GetSource returns __getTraitsInput.Source, and is useful for accessing the field via an interface.
func (v *__getTraitsInput) GetSource() Source { return v.Source }

// GetLabels returns __getTraitsInput.Labels, and is useful for accessing the field via an interface.
func (v *__getTraitsInput) GetLabels() []TraitLabel { return v.Labels }

// __lookupActivityInput is used internally by genqlient
type __lookupActivityInput struct {
	DataKey    string            `json:"dataKey"`
	ActivityId graphqlTypes.UUID `json:"activityId"`
}

// GetDataKey returns __lookupActivityInput.DataKey, and is useful for accessing the field via an interface.
func (v *__lookupActivityInput) GetDataKey() string { return v.DataKey }

// GetActivityId returns __lookupActivityInput.ActivityId, and is useful for accessing the field via an interface.
func (v *__lookupActivityInput) GetActivityId() graphqlTypes.UUID { return v.ActivityId }

// __lookupTraitInput is used internally by genqlient
type __lookupTraitInput struct {
	DataKey string            `json:"dataKey"`
	TraitId graphqlTypes.UUID `json:"traitId"`
}

// GetDataKey returns __lookupTraitInput.DataKey, and is useful for accessing the field via an interface.
func (v *__lookupTraitInput) GetDataKey() string { return v.DataKey }

// GetTraitId returns __lookupTraitInput.TraitId, and is useful for accessing the field via an interface.
func (v *__lookupTraitInput) GetTraitId() graphqlTypes.UUID { return v.TraitId }

// getActivityResponse is returned by getActivity on success.
type getActivityResponse struct {
	GetActivity GetActivityActivityResponse `json:"getActivity"`
}

// GetGetActivity returns getActivityResponse.GetActivity, and is useful for accessing the field via an interface.
func (v *getActivityResponse) GetGetActivity() GetActivityActivityResponse { return v.GetActivity }

// getAppByPublicKeyResponse is returned by getAppByPublicKey on success.
type getAppByPublicKeyResponse struct {
	GetAppByPublicKey GetAppByPublicKeyApplication `json:"getAppByPublicKey"`
}

// GetGetAppByPublicKey returns getAppByPublicKeyResponse.GetAppByPublicKey, and is useful for accessing the field via an interface.
func (v *getAppByPublicKeyResponse) GetGetAppByPublicKey() GetAppByPublicKeyApplication {
	return v.GetAppByPublicKey
}

// getTraitsResponse is returned by getTraits on success.
type getTraitsResponse struct {
	GetTraits []GetTraitsTrait `json:"getTraits"`
}

// GetGetTraits returns getTraitsResponse.GetTraits, and is useful for accessing the field via an interface.
func (v *getTraitsResponse) GetGetTraits() []GetTraitsTrait { return v.GetTraits }

// lookupActivityResponse is returned by lookupActivity on success.
type lookupActivityResponse struct {
	LookupActivity LookupActivity `json:"lookupActivity"`
}

// GetLookupActivity returns lookupActivityResponse.LookupActivity, and is useful for accessing the field via an interface.
func (v *lookupActivityResponse) GetLookupActivity() LookupActivity { return v.LookupActivity }

// lookupTraitResponse is returned by lookupTrait on success.
type lookupTraitResponse struct {
	LookupTrait LookupTrait `json:"lookupTrait"`
}

// GetLookupTrait returns lookupTraitResponse.LookupTrait, and is useful for accessing the field via an interface.
func (v *lookupTraitResponse) GetLookupTrait() LookupTrait { return v.LookupTrait }

// The query or mutation executed by getActivity.
const getActivity_Operation = `
query getActivity ($dataKey: String!, $source: Source!, $limit: Int64!, $page: Int64!) {
	getActivity(dataKey: $dataKey, source: $source, limit: $limit, page: $page) {
		... on ActivityResponse {
			data {
				... on Activity {
					id
					metadata {
						__typename
						... NetflixActivityMetadata
						... PlaystationActivityMetadata
						... AmazonActivityMetadata
						... YoutubeActivityMetadata
						... UberActivityMetadata
						... InstacartActivityMetadata
					}
				}
			}
			limit
			total
			page
		}
	}
}
fragment NetflixActivityMetadata on NetflixActivityMetadata {
	title
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	date
	lastPlayedAt
}
fragment PlaystationActivityMetadata on PlaystationActivityMetadata {
	title
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	lastPlayedAt
}
fragment AmazonActivityMetadata on AmazonActivityMetadata {
	productName
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	date
	quantityPurchased
	totalCost
}
fragment YoutubeActivityMetadata on YoutubeActivityMetadata {
	title
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	date
	percentageWatched
	contentType
}
fragment UberActivityMetadata on UberActivityMetadata {
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	beginTripTime
	dropoffTime
	cost
	city
	distance
	status
}
fragment InstacartActivityMetadata on InstacartActivityMetadata {
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	retailer
	totalOrderAmountSpent
	dateOrdered
	dateDelivered
	statusString
	items {
		... on InstacartOrderItem {
			itemID
			productName
			unitPrice
			status
			quantityPurchased
		}
	}
}
`

func (eye EyeOfSauron) GetActivity(
	ctx_ context.Context,
	dataKey string,
	source Source,
	limit graphqlTypes.Int64,
	page graphqlTypes.Int64,
) (*getActivityResponse, error) {
	req := graphql2.NewRequest(getActivity_Operation)

	req.Var("dataKey", dataKey)
	req.Var("source", source)
	req.Var("limit", limit)
	req.Var("page", page)
	requestBodyObj := struct {
		Query     string                 `json:"query"`
		Variables map[string]interface{} `json:"variables"`
	}{
		Query:     req.Query(),
		Variables: req.Vars(),
	}

	var requestBody bytes.Buffer
	if err := json.NewEncoder(&requestBody).Encode(requestBodyObj); err != nil {
		return nil, fmt.Errorf("unable to encode body %s", err)
	}

	var err_ error
	signatureB64, err_ := SignMessageAsBase64(eye.privateKey, requestBody.Bytes())
	if err_ != nil {
		return nil, fmt.Errorf("unable to generate signature: %v", err_)
	}

	req.Header.Set("X-Gandalf-Signature", signatureB64)

	var resp_ getActivityResponse

	if err_ := eye.client.Run(
		ctx_,
		req,
		&resp_,
	); err_ != nil {
		return nil, fmt.Errorf("failed to execute request: %v", err_)
	}

	return &resp_, nil
}

// The query or mutation executed by getAppByPublicKey.
const getAppByPublicKey_Operation = `
query getAppByPublicKey ($publicKey: String!) {
	getAppByPublicKey(publicKey: $publicKey) {
		... on Application {
			appName
			publicKey
			iconURL
			gandalfID
			appRegistrar
		}
	}
}
`

func (eye EyeOfSauron) GetAppByPublicKey(
	ctx_ context.Context,
	publicKey string,
) (*getAppByPublicKeyResponse, error) {
	req := graphql2.NewRequest(getAppByPublicKey_Operation)

	req.Var("publicKey", publicKey)
	requestBodyObj := struct {
		Query     string                 `json:"query"`
		Variables map[string]interface{} `json:"variables"`
	}{
		Query:     req.Query(),
		Variables: req.Vars(),
	}

	var requestBody bytes.Buffer
	if err := json.NewEncoder(&requestBody).Encode(requestBodyObj); err != nil {
		return nil, fmt.Errorf("unable to encode body %s", err)
	}

	var err_ error
	signatureB64, err_ := SignMessageAsBase64(eye.privateKey, requestBody.Bytes())
	if err_ != nil {
		return nil, fmt.Errorf("unable to generate signature: %v", err_)
	}

	req.Header.Set("X-Gandalf-Signature", signatureB64)

	var resp_ getAppByPublicKeyResponse

	if err_ := eye.client.Run(
		ctx_,
		req,
		&resp_,
	); err_ != nil {
		return nil, fmt.Errorf("failed to execute request: %v", err_)
	}

	return &resp_, nil
}

// The query or mutation executed by getTraits.
const getTraits_Operation = `
query getTraits ($dataKey: String!, $source: Source!, $labels: [TraitLabel]!) {
	getTraits(dataKey: $dataKey, source: $source, labels: $labels) {
		... on Trait {
			id
			source
			label
			value
			timestamp
		}
	}
}
`

func (eye EyeOfSauron) GetTraits(
	ctx_ context.Context,
	dataKey string,
	source Source,
	labels []TraitLabel,
) (*getTraitsResponse, error) {
	req := graphql2.NewRequest(getTraits_Operation)

	req.Var("dataKey", dataKey)
	req.Var("source", source)
	req.Var("labels", labels)
	requestBodyObj := struct {
		Query     string                 `json:"query"`
		Variables map[string]interface{} `json:"variables"`
	}{
		Query:     req.Query(),
		Variables: req.Vars(),
	}

	var requestBody bytes.Buffer
	if err := json.NewEncoder(&requestBody).Encode(requestBodyObj); err != nil {
		return nil, fmt.Errorf("unable to encode body %s", err)
	}

	var err_ error
	signatureB64, err_ := SignMessageAsBase64(eye.privateKey, requestBody.Bytes())
	if err_ != nil {
		return nil, fmt.Errorf("unable to generate signature: %v", err_)
	}

	req.Header.Set("X-Gandalf-Signature", signatureB64)

	var resp_ getTraitsResponse

	if err_ := eye.client.Run(
		ctx_,
		req,
		&resp_,
	); err_ != nil {
		return nil, fmt.Errorf("failed to execute request: %v", err_)
	}

	return &resp_, nil
}

// The query or mutation executed by lookupActivity.
const lookupActivity_Operation = `
query lookupActivity ($dataKey: String!, $activityId: UUID!) {
	lookupActivity(dataKey: $dataKey, activityId: $activityId) {
		... on Activity {
			id
			metadata {
				__typename
				... NetflixActivityMetadata
				... PlaystationActivityMetadata
				... AmazonActivityMetadata
				... YoutubeActivityMetadata
				... UberActivityMetadata
				... InstacartActivityMetadata
			}
		}
	}
}
fragment NetflixActivityMetadata on NetflixActivityMetadata {
	title
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	date
	lastPlayedAt
}
fragment PlaystationActivityMetadata on PlaystationActivityMetadata {
	title
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	lastPlayedAt
}
fragment AmazonActivityMetadata on AmazonActivityMetadata {
	productName
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	date
	quantityPurchased
	totalCost
}
fragment YoutubeActivityMetadata on YoutubeActivityMetadata {
	title
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	date
	percentageWatched
	contentType
}
fragment UberActivityMetadata on UberActivityMetadata {
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	beginTripTime
	dropoffTime
	cost
	city
	distance
	status
}
fragment InstacartActivityMetadata on InstacartActivityMetadata {
	subject {
		... on Identifier {
			value
			identifierType
		}
	}
	retailer
	totalOrderAmountSpent
	dateOrdered
	dateDelivered
	statusString
	items {
		... on InstacartOrderItem {
			itemID
			productName
			unitPrice
			status
			quantityPurchased
		}
	}
}
`

func (eye EyeOfSauron) LookupActivity(
	ctx_ context.Context,
	dataKey string,
	activityId graphqlTypes.UUID,
) (*lookupActivityResponse, error) {
	req := graphql2.NewRequest(lookupActivity_Operation)

	req.Var("dataKey", dataKey)
	req.Var("activityId", activityId)
	requestBodyObj := struct {
		Query     string                 `json:"query"`
		Variables map[string]interface{} `json:"variables"`
	}{
		Query:     req.Query(),
		Variables: req.Vars(),
	}

	var requestBody bytes.Buffer
	if err := json.NewEncoder(&requestBody).Encode(requestBodyObj); err != nil {
		return nil, fmt.Errorf("unable to encode body %s", err)
	}

	var err_ error
	signatureB64, err_ := SignMessageAsBase64(eye.privateKey, requestBody.Bytes())
	if err_ != nil {
		return nil, fmt.Errorf("unable to generate signature: %v", err_)
	}

	req.Header.Set("X-Gandalf-Signature", signatureB64)

	var resp_ lookupActivityResponse

	if err_ := eye.client.Run(
		ctx_,
		req,
		&resp_,
	); err_ != nil {
		return nil, fmt.Errorf("failed to execute request: %v", err_)
	}

	return &resp_, nil
}

// The query or mutation executed by lookupTrait.
const lookupTrait_Operation = `
query lookupTrait ($dataKey: String!, $traitId: UUID!) {
	lookupTrait(dataKey: $dataKey, traitId: $traitId) {
		... on Trait {
			id
			source
			label
			value
			timestamp
		}
	}
}
`

func (eye EyeOfSauron) LookupTrait(
	ctx_ context.Context,
	dataKey string,
	traitId graphqlTypes.UUID,
) (*lookupTraitResponse, error) {
	req := graphql2.NewRequest(lookupTrait_Operation)

	req.Var("dataKey", dataKey)
	req.Var("traitId", traitId)
	requestBodyObj := struct {
		Query     string                 `json:"query"`
		Variables map[string]interface{} `json:"variables"`
	}{
		Query:     req.Query(),
		Variables: req.Vars(),
	}

	var requestBody bytes.Buffer
	if err := json.NewEncoder(&requestBody).Encode(requestBodyObj); err != nil {
		return nil, fmt.Errorf("unable to encode body %s", err)
	}

	var err_ error
	signatureB64, err_ := SignMessageAsBase64(eye.privateKey, requestBody.Bytes())
	if err_ != nil {
		return nil, fmt.Errorf("unable to generate signature: %v", err_)
	}

	req.Header.Set("X-Gandalf-Signature", signatureB64)

	var resp_ lookupTraitResponse

	if err_ := eye.client.Run(
		ctx_,
		req,
		&resp_,
	); err_ != nil {
		return nil, fmt.Errorf("failed to execute request: %v", err_)
	}

	return &resp_, nil
}
